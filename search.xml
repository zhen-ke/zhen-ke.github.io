<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Armbian USB 自动挂载并共享教程</title>
    <url>/2024/11/15/armbian-usb-automount-share/</url>
    <content><![CDATA[<p>本教程介绍如何在 Armbian 系统上实现 USB 设备的自动挂载和 Samba 共享功能。通过这个脚本，你可以实现插入 USB 设备后自动挂载并创建网络共享，支持 Windows 网络发现功能。</p>
<h2 id="功能特点"><a href="#功能特点" class="headerlink" title="功能特点"></a>功能特点</h2><ul>
<li>自动检测并挂载 USB 存储设备</li>
<li>支持多种文件系统：NTFS、FAT32、exFAT、ext4</li>
<li>自动配置 Samba 共享</li>
<li>支持 Windows 网络发现（通过 wsdd2）</li>
<li>即插即用，无需手动操作</li>
<li>支持匿名访问和完全读写权限</li>
<li>自动日志记录</li>
<li>智能依赖检查和安装</li>
</ul>
<span id="more"></span>

<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><h3 id="1-更换镜像源（可选，但推荐）"><a href="#1-更换镜像源（可选，但推荐）" class="headerlink" title="1. 更换镜像源（可选，但推荐）"></a>1. 更换镜像源（可选，但推荐）</h3><p>编辑 sources.list 文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nano /etc/apt/sources.list</span><br></pre></td></tr></table></figure>

<p>选择适合你系统的镜像源：</p>
<details>
<summary>📦 Ubuntu 系统（点击展开）</summary>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清华大学 Ubuntu 镜像源</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ noble main restricted universe multiverse</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ noble-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ noble-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure>

</details>

<details>
<summary>📦 Debian 系统（点击展开）</summary>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清华大学 Debian 镜像源</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm main contrib non-free non-free-firmware</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-updates main contrib non-free non-free-firmware</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-backports main contrib non-free non-free-firmware</span><br></pre></td></tr></table></figure>

</details>

<blockquote>
<p>💡 提示：选择对应你系统的镜像源复制即可，不确定是哪个系统可以通过 <code>lsb_release -a</code> 命令查看</p>
</blockquote>
<h3 id="2-安装必要软件包"><a href="#2-安装必要软件包" class="headerlink" title="2. 安装必要软件包"></a>2. 安装必要软件包</h3><p>脚本会自动安装以下必要组件：</p>
<ul>
<li>samba：网络共享服务</li>
<li>samba-common-bin：Samba 通用组件</li>
<li>ntfs-3g：NTFS 文件系统支持</li>
<li>exfat-fuse 和 exfatprogs：exFAT 文件系统支持</li>
<li>jq：JSON 处理工具</li>
<li>wsdd2：Windows 网络发现支持</li>
</ul>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><h3 id="1-创建脚本文件"><a href="#1-创建脚本文件" class="headerlink" title="1. 创建脚本文件"></a>1. 创建脚本文件</h3><p>创建并编辑脚本文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nano usb-automount-share.sh</span><br></pre></td></tr></table></figure>

<details>
<summary>📦 脚本内容（点击展开）</summary>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置</span></span><br><span class="line"></span><br><span class="line">MOUNT_BASE=<span class="string">&quot;/mnt/usb&quot;</span></span><br><span class="line">SMB_CONF=<span class="string">&quot;/etc/samba/smb.conf&quot;</span></span><br><span class="line">LOG_FILE=<span class="string">&quot;/var/log/usb_share.log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保基础挂载目录存在</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="string">&quot;<span class="variable">$MOUNT_BASE</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取所有 USB 存储设备</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">get_usb_devices</span></span>() &#123;</span><br><span class="line">lsblk -Jplno NAME,TYPE,RM,UUID | jq -r <span class="string">&#x27;.blockdevices[]</span></span><br><span class="line"><span class="string">| select(.type == &quot;part&quot; and .rm == true and .uuid != null)</span></span><br><span class="line"><span class="string">| .name + &quot; &quot; + .uuid&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 Samba 共享</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">setup_samba_share</span></span>() &#123;</span><br><span class="line"><span class="built_in">local</span> mount_point=<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">    <span class="built_in">local</span> share_name=$(<span class="built_in">basename</span> <span class="string">&quot;<span class="variable">$mount_point</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果配置文件不存在或为空，先创建基本配置</span></span><br><span class="line">    <span class="keyword">if</span> [ ! -f <span class="string">&quot;<span class="variable">$SMB_CONF</span>&quot;</span> ] || [ ! -s <span class="string">&quot;<span class="variable">$SMB_CONF</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="comment"># 创建配置文件目录</span></span><br><span class="line">        <span class="built_in">mkdir</span> -p <span class="string">&quot;<span class="subst">$(dirname <span class="string">&quot;<span class="variable">$SMB_CONF</span>&quot;</span>)</span>&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建基本配置</span></span><br><span class="line">        <span class="built_in">cat</span> &gt; <span class="string">&quot;<span class="variable">$SMB_CONF</span>&quot;</span> &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[global]</span></span><br><span class="line"><span class="string">workgroup = WORKGROUP</span></span><br><span class="line"><span class="string">netbios name = USB-SHARE</span></span><br><span class="line"><span class="string">wins support = yes</span></span><br><span class="line"><span class="string">local master = yes</span></span><br><span class="line"><span class="string">preferred master = yes</span></span><br><span class="line"><span class="string">server string = USB Share Server</span></span><br><span class="line"><span class="string">dns proxy = no</span></span><br><span class="line"><span class="string">log file = /var/log/samba/log.%m</span></span><br><span class="line"><span class="string">max log size = 1000</span></span><br><span class="line"><span class="string">server role = standalone server</span></span><br><span class="line"><span class="string">map to guest = Bad User</span></span><br><span class="line"><span class="string">usershare allow guests = yes</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 确保日志目录存在</span></span><br><span class="line">        <span class="built_in">mkdir</span> -p /var/log/samba</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置适当的权限</span></span><br><span class="line">        <span class="built_in">chmod</span> 644 <span class="string">&quot;<span class="variable">$SMB_CONF</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查并添加全局配置</span></span><br><span class="line">    <span class="keyword">if</span> ! grep -q <span class="string">&quot;wins support = yes&quot;</span> <span class="string">&quot;<span class="variable">$SMB_CONF</span>&quot;</span>; <span class="keyword">then</span></span><br><span class="line">        <span class="comment"># 备份原配置</span></span><br><span class="line">        <span class="built_in">cp</span> <span class="string">&quot;<span class="variable">$SMB_CONF</span>&quot;</span> <span class="string">&quot;<span class="variable">$&#123;SMB_CONF&#125;</span>.bak&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 添加全局配置到文件开头</span></span><br><span class="line">        <span class="built_in">cat</span> &gt; <span class="string">&quot;<span class="variable">$SMB_CONF</span>&quot;</span> &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[global]</span></span><br><span class="line"><span class="string">workgroup = WORKGROUP</span></span><br><span class="line"><span class="string">netbios name = USB-SHARE</span></span><br><span class="line"><span class="string">wins support = yes</span></span><br><span class="line"><span class="string">local master = yes</span></span><br><span class="line"><span class="string">preferred master = yes</span></span><br><span class="line"><span class="string">server string = USB Share Server</span></span><br><span class="line"><span class="string">dns proxy = no</span></span><br><span class="line"><span class="string">log file = /var/log/samba/log.%m</span></span><br><span class="line"><span class="string">max log size = 1000</span></span><br><span class="line"><span class="string">server role = standalone server</span></span><br><span class="line"><span class="string">map to guest = Bad User</span></span><br><span class="line"><span class="string">usershare allow guests = yes</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">EOF</span> <span class="comment"># 追加原配置文件的其余部分（排除原有的 [global] 部分）</span></span><br><span class="line">sed <span class="string">&#x27;/\[global\]/,/\[/!d;/\[global\]/d;/\[/!d&#x27;</span> <span class="string">&quot;<span class="variable">$&#123;SMB_CONF&#125;</span>.bak&quot;</span> &gt;&gt; <span class="string">&quot;<span class="variable">$SMB_CONF</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查共享是否已存在</span></span><br><span class="line">    <span class="keyword">if</span> ! grep -q <span class="string">&quot;^\[<span class="variable">$share_name</span>\]&quot;</span> <span class="string">&quot;<span class="variable">$SMB_CONF</span>&quot;</span>; <span class="keyword">then</span></span><br><span class="line">        <span class="comment"># 添加共享配置</span></span><br><span class="line">        <span class="built_in">cat</span> &gt;&gt; <span class="string">&quot;<span class="variable">$SMB_CONF</span>&quot;</span> &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[$share_name]</span></span><br><span class="line"><span class="string">path = $mount_point</span></span><br><span class="line"><span class="string">browseable = yes</span></span><br><span class="line"><span class="string">read only = no</span></span><br><span class="line"><span class="string">guest ok = yes</span></span><br><span class="line"><span class="string">create mask = 0777</span></span><br><span class="line"><span class="string">directory mask = 0777</span></span><br><span class="line"><span class="string">force user = nobody</span></span><br><span class="line"><span class="string">force group = nogroup</span></span><br><span class="line"><span class="string">comment = USB Share - $share_name</span></span><br><span class="line"><span class="string">EOF</span> <span class="comment"># 重启 Samba 服务</span></span><br><span class="line">systemctl restart smbd nmbd</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂载设备</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">mount_device</span></span>() &#123;</span><br><span class="line"><span class="built_in">local</span> device=<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">    <span class="built_in">local</span> uuid=<span class="string">&quot;<span class="variable">$2</span>&quot;</span></span><br><span class="line">    <span class="built_in">local</span> mount_point=<span class="string">&quot;<span class="variable">$MOUNT_BASE</span>/<span class="subst">$(basename <span class="string">&quot;<span class="variable">$device</span>&quot;</span>)</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建挂载点</span></span><br><span class="line">    <span class="built_in">mkdir</span> -p <span class="string">&quot;<span class="variable">$mount_point</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查是否已经挂载</span></span><br><span class="line">    <span class="keyword">if</span> ! mountpoint -q <span class="string">&quot;<span class="variable">$mount_point</span>&quot;</span>; <span class="keyword">then</span></span><br><span class="line">        <span class="comment"># 尝试挂载</span></span><br><span class="line">        mount -U <span class="string">&quot;<span class="variable">$uuid</span>&quot;</span> <span class="string">&quot;<span class="variable">$mount_point</span>&quot;</span> -o rw,<span class="built_in">users</span>,<span class="built_in">umask</span>=000</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> [ $? -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;成功挂载设备 <span class="variable">$device</span> 到 <span class="variable">$mount_point</span>&quot;</span> | <span class="built_in">tee</span> -a <span class="string">&quot;<span class="variable">$LOG_FILE</span>&quot;</span></span><br><span class="line">            <span class="comment"># 设置Samba共享</span></span><br><span class="line">            setup_samba_share <span class="string">&quot;<span class="variable">$mount_point</span>&quot;</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;挂载设备 <span class="variable">$device</span> 失败&quot;</span> | <span class="built_in">tee</span> -a <span class="string">&quot;<span class="variable">$LOG_FILE</span>&quot;</span></span><br><span class="line">            <span class="built_in">rmdir</span> <span class="string">&quot;<span class="variable">$mount_point</span>&quot;</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查并安装依赖</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">install_dependencies</span></span>() &#123;</span><br><span class="line"><span class="built_in">local</span> dependencies=(<span class="string">&quot;samba&quot;</span> <span class="string">&quot;samba-common-bin&quot;</span> <span class="string">&quot;ntfs-3g&quot;</span> <span class="string">&quot;exfat-fuse&quot;</span> <span class="string">&quot;exfatprogs&quot;</span> <span class="string">&quot;jq&quot;</span> <span class="string">&quot;wsdd2&quot;</span>)</span><br><span class="line"><span class="built_in">local</span> packages_to_install=()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> package <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;dependencies[@]&#125;</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">        <span class="comment"># 使用 dpkg-query 检查包是否已安装</span></span><br><span class="line">        <span class="keyword">if</span> ! dpkg-query -W -f=<span class="string">&#x27;$&#123;Status&#125;&#x27;</span> <span class="string">&quot;<span class="variable">$package</span>&quot;</span> 2&gt;/dev/null | grep -q <span class="string">&quot;ok installed&quot;</span>; <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;需要安装: <span class="variable">$package</span>&quot;</span> | <span class="built_in">tee</span> -a <span class="string">&quot;<span class="variable">$LOG_FILE</span>&quot;</span></span><br><span class="line">            packages_to_install+=(<span class="string">&quot;<span class="variable">$package</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 只有当有包需要安装时才执行安装</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$&#123;#packages_to_install[@]&#125;</span> -gt 0 ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;开始安装缺失的包...&quot;</span> | <span class="built_in">tee</span> -a <span class="string">&quot;<span class="variable">$LOG_FILE</span>&quot;</span></span><br><span class="line">        <span class="comment"># 先尝试直接安装</span></span><br><span class="line">        <span class="keyword">if</span> ! apt-get install -y <span class="string">&quot;<span class="variable">$&#123;packages_to_install[@]&#125;</span>&quot;</span>; <span class="keyword">then</span></span><br><span class="line">            <span class="comment"># 如果安装失败，则更新源后重试</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;直接安装失败，更新软件源后重试...&quot;</span> | <span class="built_in">tee</span> -a <span class="string">&quot;<span class="variable">$LOG_FILE</span>&quot;</span></span><br><span class="line">            apt-get update &amp;&amp; apt-get install -y <span class="string">&quot;<span class="variable">$&#123;packages_to_install[@]&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;所有依赖包已安装&quot;</span> | <span class="built_in">tee</span> -a <span class="string">&quot;<span class="variable">$LOG_FILE</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保 nmbd 服务已安装并启动</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">ensure_nmbd_service</span></span>() &#123;</span><br><span class="line">systemctl <span class="built_in">enable</span> nmbd</span><br><span class="line">systemctl start nmbd</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加新函数来确保 wsdd2 服务正常运行</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">ensure_wsdd2_service</span></span>() &#123;</span><br><span class="line">systemctl <span class="built_in">enable</span> wsdd2</span><br><span class="line">systemctl start wsdd2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">main</span></span>() &#123; <span class="comment"># 检查并安装依赖</span></span><br><span class="line">install_dependencies</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 确保 nmbd 服务已安装并启动</span></span><br><span class="line">    ensure_nmbd_service</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 确保 wsdd2 服务已启动</span></span><br><span class="line">    ensure_wsdd2_service</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理所有USB存储设备</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">read</span> -r device uuid; <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$uuid</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">            mount_device <span class="string">&quot;<span class="variable">$device</span>&quot;</span> <span class="string">&quot;<span class="variable">$uuid</span>&quot;</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span> &lt; &lt;(get_usb_devices)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行主函数</span></span><br><span class="line"></span><br><span class="line">main</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</details>

<h3 id="2-设置脚本权限并安装"><a href="#2-设置脚本权限并安装" class="headerlink" title="2. 设置脚本权限并安装"></a>2. 设置脚本权限并安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x usb-automount-share.sh</span><br><span class="line"><span class="built_in">cp</span> usb-automount-share.sh /usr/local/bin/</span><br></pre></td></tr></table></figure>

<h3 id="3-配置开机自启"><a href="#3-配置开机自启" class="headerlink" title="3. 配置开机自启"></a>3. 配置开机自启</h3><p>有两种方式可以选择：</p>
<h4 id="方式一：使用-rc-local（推荐）"><a href="#方式一：使用-rc-local（推荐）" class="headerlink" title="方式一：使用 rc.local（推荐）"></a>方式一：使用 rc.local（推荐）</h4><ol>
<li>编辑 rc.local 文件：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/rc.local</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在 <code>exit 0</code> 前添加：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/local/bin/usb-automount-share.sh</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>确保 rc.local 可执行：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> +x /etc/rc.local</span><br></pre></td></tr></table></figure>

<h4 id="方式二：使用-systemd-service"><a href="#方式二：使用-systemd-service" class="headerlink" title="方式二：使用 systemd service"></a>方式二：使用 systemd service</h4><ol>
<li>创建服务文件：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/systemd/system/usb-automount.service</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>添加以下内容：</li>
</ol>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=USB Automount Service</span><br><span class="line"><span class="attr">After</span>=network.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=simple</span><br><span class="line"><span class="attr">ExecStart</span>=/usr/local/bin/usb-automount-share.sh</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>启用服务：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> usb-automount</span><br><span class="line">sudo systemctl start usb-automount</span><br></pre></td></tr></table></figure>

<h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><h3 id="1-插入-USB-设备"><a href="#1-插入-USB-设备" class="headerlink" title="1. 插入 USB 设备"></a>1. 插入 USB 设备</h3><p>设备插入后会自动：</p>
<ul>
<li>检测 USB 设备</li>
<li>创建挂载点</li>
<li>挂载设备</li>
<li>配置网络共享</li>
</ul>
<h3 id="2-访问共享"><a href="#2-访问共享" class="headerlink" title="2. 访问共享"></a>2. 访问共享</h3><ul>
<li>Windows：<ul>
<li>方式 1：网络邻居中找到 “USB-SHARE”</li>
<li>方式 2：<code>\\USB-SHARE</code> 或 <code>\\IP地址</code></li>
</ul>
</li>
<li>Mac：<code>smb://USB-SHARE</code> 或 <code>smb://IP地址</code></li>
<li>Linux：<code>smb://USB-SHARE</code> 或 <code>smb://IP地址</code></li>
</ul>
<h3 id="3-查看状态"><a href="#3-查看状态" class="headerlink" title="3. 查看状态"></a>3. 查看状态</h3><ul>
<li>检查挂载：<code>df -h</code> 或 <code>lsblk</code></li>
<li>查看日志：<code>tail -f /var/log/usb_share.log</code></li>
<li>检查服务：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl status smbd</span><br><span class="line">systemctl status nmbd</span><br><span class="line">systemctl status wsdd2</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="故障排除"><a href="#故障排除" class="headerlink" title="故障排除"></a>故障排除</h2><h3 id="1-网络发现问题"><a href="#1-网络发现问题" class="headerlink" title="1. 网络发现问题"></a>1. 网络发现问题</h3><p>检查 wsdd2 服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl status wsdd2</span><br></pre></td></tr></table></figure>

<h3 id="2-共享访问问题"><a href="#2-共享访问问题" class="headerlink" title="2. 共享访问问题"></a>2. 共享访问问题</h3><p>检查 Samba 配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">testparm</span><br></pre></td></tr></table></figure>

<h3 id="3-挂载问题"><a href="#3-挂载问题" class="headerlink" title="3. 挂载问题"></a>3. 挂载问题</h3><p>查看设备信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsblk -f</span><br></pre></td></tr></table></figure>

<h3 id="4-权限问题"><a href="#4-权限问题" class="headerlink" title="4. 权限问题"></a>4. 权限问题</h3><p>检查挂载权限：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l /mnt/usb/</span><br></pre></td></tr></table></figure>

<h2 id="日志说明"><a href="#日志说明" class="headerlink" title="日志说明"></a>日志说明</h2><p>脚本会记录以下信息到 <code>/var/log/usb_share.log</code>：</p>
<ul>
<li>设备挂载状态</li>
<li>依赖安装情况</li>
<li>错误信息</li>
<li>服务启动状态</li>
</ul>
<h2 id="安全建议"><a href="#安全建议" class="headerlink" title="安全建议"></a>安全建议</h2><ol>
<li><p>默认配置</p>
<ul>
<li>允许匿名访问</li>
<li>完全读写权限</li>
<li>适合家庭网络使用</li>
</ul>
</li>
<li><p>增强安全性</p>
<ul>
<li>修改 Samba 配置添加用户认证</li>
<li>限制共享权限</li>
<li>配置防火墙规则</li>
</ul>
</li>
</ol>
<h2 id="技术支持"><a href="#技术支持" class="headerlink" title="技术支持"></a>技术支持</h2><p>如遇问题，请检查：</p>
<ol>
<li>系统日志：<code>journalctl -xe</code></li>
<li>Samba 日志：<code>tail -f /var/log/samba/log.smbd</code></li>
<li>USB 日志：<code>tail -f /var/log/usb_share.log</code></li>
<li>确保所需服务正常运行</li>
</ol>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a class="link"   href="https://www.samba.org/samba/docs/" >Samba 官方文档<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/christgau/wsdd2" >wsdd2 项目<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://docs.armbian.com/" >Armbian 官方文档<i class="fas fa-external-link-alt"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>armbian usb automount share</category>
      </categories>
      <tags>
        <tag>NAS</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树广度优先搜索</title>
    <url>/2017/07/07/binary-tree-level-order-traversal/</url>
    <content><![CDATA[<p><strong>把每层的值的放到一个数组里</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> breadthTraversal = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = [] <span class="comment">//定义保存广度遍历结果的数组</span></span><br><span class="line">  <span class="keyword">let</span> queue = [root] <span class="comment">//将二叉树放入队列</span></span><br><span class="line">  <span class="keyword">if</span> (root) &#123; <span class="comment">//判断二叉树是否为空</span></span><br><span class="line">    <span class="keyword">while</span> (queue.<span class="property">length</span>) &#123; <span class="comment">//判断队列是否为空</span></span><br><span class="line">      <span class="keyword">let</span> node = queue.<span class="title function_">shift</span>() <span class="comment">//从队列中取出一个结点</span></span><br><span class="line">      result.<span class="title function_">push</span>(node.<span class="property">value</span>) <span class="comment">//将取出结点的值保存到数组</span></span><br><span class="line">      <span class="keyword">if</span> (node.<span class="property">left</span>) queue.<span class="title function_">push</span>(node.<span class="property">left</span>) <span class="comment">//如果存在左子树，将左子树放入队列</span></span><br><span class="line">      <span class="keyword">if</span> (node.<span class="property">right</span>) queue.<span class="title function_">push</span>(node.<span class="property">right</span>) <span class="comment">//如果存在右子树，将右子树放入队列</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">breadthTraversal</span>(tree);</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<p><strong>把每层的值的放到一个二维数组里</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> breadthTraversal = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> result = [];</span><br><span class="line">  <span class="keyword">if</span> (root) &#123;</span><br><span class="line">    <span class="keyword">var</span> queue = [root];</span><br><span class="line">    <span class="keyword">while</span> (queue.<span class="property">length</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> temp = []</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = queue.<span class="property">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> node = queue.<span class="title function_">shift</span>()</span><br><span class="line">        temp.<span class="title function_">push</span>(node.<span class="property">value</span>);</span><br><span class="line">        <span class="keyword">if</span> (node.<span class="property">left</span>) queue.<span class="title function_">push</span>(node.<span class="property">left</span>);</span><br><span class="line">        <span class="keyword">if</span> (node.<span class="property">right</span>) queue.<span class="title function_">push</span>(node.<span class="property">right</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      result.<span class="title function_">push</span>(temp)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">breadthTraversal</span>(tree);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Web Developer</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>ffmpegGUI 开发笔记</title>
    <url>/2019/06/17/ffmpeggui-development-notes/</url>
    <content><![CDATA[<h2 id="如何开启硬件加速"><a href="#如何开启硬件加速" class="headerlink" title="如何开启硬件加速"></a>如何开启硬件加速</h2><p><strong>注意：</strong> 在开启硬件加速时，转码的速度虽然快了，但视频质量会出现大幅下滑，目前解决办法只能通过设置高码率来解决，目前我的做法是在原码率的基础上提高 1.5 倍，基本能保证视频质量，但体积也会增加 1.5 倍（如果有更好的方法请告诉我）</p>
<p>以我这个项目为例，首先通过执行 <code>ffmpeg -hwaccels</code> 来获取当前机器支持哪些硬件加速的方法，不同的平台开启硬件加速的方法不一样</p>
<p>查看机器支持的硬件加速的方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// node子进程的方式</span></span><br><span class="line"><span class="keyword">let</span> exec = <span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>).<span class="property">exec</span>;</span><br><span class="line"><span class="title function_">exec</span>(<span class="string">`<span class="subst">$&#123;ffmpegPath&#125;</span> -hwaccels`</span>, <span class="function">(<span class="params">err, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(stdout); <span class="comment">// Hardware acceleration methods: videotoolbox</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原生ffmpeg的方式</span></span><br><span class="line">ffmpeg - hwaccels;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>查看机器支持的编码器（encoders）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// node子进程的方式</span></span><br><span class="line"><span class="keyword">let</span> exec = <span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>).<span class="property">exec</span>;</span><br><span class="line"><span class="title function_">exec</span>(<span class="string">`<span class="subst">$&#123;ffmpegPath&#125;</span> -encoders`</span>, <span class="function">(<span class="params">err, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(stdout);</span><br><span class="line">  <span class="comment">// 这里会打印出很多信息，只需要找出带有之前带有videotoolbox的就行（这里的 videotoolbox 是上次查到的支持硬件加速的方法）</span></span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">  <span class="comment">// V..... h264_videotoolbox    VideoToolbox H.264 Encoder (codec h264)</span></span><br><span class="line">  <span class="comment">// V..... hevc_videotoolbox    VideoToolbox H.265 Encoder (codec hevc)</span></span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原生ffmpeg的方式</span></span><br><span class="line">ffmpeg - encoders;</span><br></pre></td></tr></table></figure>

<p>把上面查到的结果带到<code>ffmpeg</code> 里执行即可（以下代码是我项目的例子，如果是命令的方式，直接带上这个参数执行就行）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">ffmpeg</span>()</span><br><span class="line">  .<span class="title function_">input</span>(<span class="string">&quot;/dev/video&quot;</span>)</span><br><span class="line">  .<span class="title function_">videoCodec</span>(<span class="string">&quot;h264_videotoolbox&quot;</span>) <span class="comment">// H264，hevc_videotoolbox(h265)</span></span><br><span class="line">  .<span class="title function_">inputFormat</span>(<span class="string">&quot;mov&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原生ffmpeg的方式</span></span><br><span class="line">ffmpeg -vcodec h264_videotoolbox</span><br></pre></td></tr></table></figure>

<p>以上就可以开启硬件加速功能了</p>
<h2 id="打包后-electron-里-asar-不能使用二进制文件的问题"><a href="#打包后-electron-里-asar-不能使用二进制文件的问题" class="headerlink" title="打包后 electron 里 asar 不能使用二进制文件的问题"></a>打包后 electron 里 asar 不能使用二进制文件的问题</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修复 electron asar 不能使用二进制文件的问题</span></span><br><span class="line"><span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&quot;development&quot;</span>) &#123;</span><br><span class="line">  ffmpegPath = ffmpegPath.<span class="title function_">replace</span>(<span class="string">&quot;app.asar&quot;</span>, <span class="string">&quot;app.asar.unpacked&quot;</span>);</span><br><span class="line">  ffprobePath = ffprobePath.<span class="title function_">replace</span>(<span class="string">&quot;app.asar&quot;</span>, <span class="string">&quot;app.asar.unpacked&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在打完包后，会把相关的二进制文件放到<code>app.asar.unpacked</code>里，默认会放到<code>app.asar</code>里</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="/images/ffmpeggui-development-notes/screenshot-03.png"
                        alt="screenshot3"
                 ></p>
<h2 id="如何通过-Webpack-打包不同平台的二进制文件到-APP-里"><a href="#如何通过-Webpack-打包不同平台的二进制文件到-APP-里" class="headerlink" title="如何通过 Webpack 打包不同平台的二进制文件到 APP 里"></a>如何通过 Webpack 打包不同平台的二进制文件到 APP 里</h2><p>首先通过 <code>process.platform</code>来判断平台，然后用 <code>CopyWebpackPlugin</code> 插件从 <code>node_modules</code> 把相关平台的的二进制文件复制出来</p>
<p><strong>webpack.renderer.config</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&quot;production&quot;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> ffmpegBasePath = <span class="string">&quot;../node_modules/ffmpeg-static/bin/&quot;</span>; <span class="comment">// ffmpeg-static</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; platform &#125; = process;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> ffmpegPathMap = &#123;</span><br><span class="line">    <span class="attr">darwin</span>: <span class="string">&quot;darwin/x64/ffmpeg&quot;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> ffmpegPath = ffmpegBasePath + ffmpegPathMap[platform];</span><br><span class="line"></span><br><span class="line">  rendererConfig.<span class="property">plugins</span>.<span class="title function_">push</span>(</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">CopyWebpackPlugin</span>([</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">from</span>: path.<span class="title function_">join</span>(__dirname, ffmpegPath),</span><br><span class="line">        <span class="attr">to</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;../core&quot;</span>),</span><br><span class="line">        <span class="attr">ignore</span>: [<span class="string">&quot;.*&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ])</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调整二进制文件的权限，并设置 <code>ffmpeg</code> 的打包后的路径（复制出来的二进制文件似乎有权限问题）</p>
<p><strong>core.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ffmpeg <span class="keyword">from</span> <span class="string">&quot;fluent-ffmpeg&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; resolve &#125; <span class="keyword">from</span> <span class="string">&quot;path&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找出复制出来的路径</span></span><br><span class="line"><span class="keyword">let</span> basePath = <span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../../../core/&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> == <span class="string">&quot;production&quot;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> realFfmpegPath = basePath + <span class="string">&quot;/ffmpeg&quot;</span>;</span><br><span class="line"></span><br><span class="line">  fs.<span class="title function_">stat</span>(realFfmpegPath, <span class="function">(<span class="params">err, stats</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 如果 ffmpeg、ffprobe 非 777 权限，则设置成 777</span></span><br><span class="line">    <span class="keyword">if</span> (stats.<span class="property">mode</span> !== <span class="number">33279</span>) &#123;</span><br><span class="line">      fs.<span class="title function_">chmod</span>(realFfmpegPath, <span class="string">&quot;0777&quot;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ffmpeg 修改权限成功&quot;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  ffmpegPath = realFfmpegPath;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ffmpeg.<span class="title function_">setFfmpegPath</span>(ffmpegPath);</span><br></pre></td></tr></table></figure>

<p>把二进制文件打包到 APP 里（通过 <code>electron builder</code> 的 <code>extraResources</code> 把二进制文件拷贝到 APP 里）</p>
<p><strong>package.json</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;mac&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;extraResources&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./core/&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;to&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./core/&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;**/*&quot;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><img  
                       lazyload
                       alt="image"
                       data-src="/images/ffmpeggui-development-notes/screenshot-04.png"
                        alt="screenshot4"
                 ></p>
]]></content>
      <categories>
        <category>Web Developer</category>
      </categories>
      <tags>
        <tag>ffmpeg</tag>
      </tags>
  </entry>
  <entry>
    <title>Gargoyle 安装 Aria2 、Transmission、Hd-idle </title>
    <url>/2016/02/20/gargoyle-install-aria2-transmission-hdidle/</url>
    <content><![CDATA[<h2 id="Aria2-安装"><a href="#Aria2-安装" class="headerlink" title="Aria2 安装"></a>Aria2 安装</h2><p><strong>使用 ssh 的方式登入路由器</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh root@192.168.1.1</span><br></pre></td></tr></table></figure>

<p><strong>在 Gargoyle 固件下安装 aria2 下载工具</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">opkg update</span><br><span class="line">opkg install aria2</span><br></pre></td></tr></table></figure>

<p><strong>启动 aria2 并进行验证（两种启动方式）</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用参数命令的方式启动</span></span><br><span class="line">aria2c --enable-rpc --rpc-listen-all=<span class="literal">true</span> --rpc-allow-origin-all -c</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用配置文件的方式去启动（前提是你得在路由器里面部署好了配置文件）</span></span><br><span class="line">aria2c --conf-path=/etc/aria2/aria2.conf</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<p><strong>手动创建 aria2 的配置文件</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /etc/aria2 <span class="comment"># 在/etc下创建aria2目录</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">touch</span> /etc/aria2/aria2.conf <span class="comment"># 在/etc/aria2下创建aria2的配置文件</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">touch</span> /etc/aria2/aria2.session <span class="comment"># 在/etc/aria2下创建aria2的运行记录文件</span></span><br></pre></td></tr></table></figure>

<p><strong>编辑 aria2.conf 文件</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi /etc/aria2/aria2.conf</span><br></pre></td></tr></table></figure>

<p><strong>aria2.conf 内容如下（这种配置文件网络上一搜一大把，具体还得看自己怎么配置）</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#允许rpc</span></span><br><span class="line">enable-rpc=<span class="literal">true</span></span><br><span class="line"><span class="comment">#允许所有来源, web界面跨域权限需要</span></span><br><span class="line">rpc-allow-origin-all=<span class="literal">true</span></span><br><span class="line"><span class="comment">#允许非外部访问</span></span><br><span class="line">rpc-listen-all=<span class="literal">true</span></span><br><span class="line"><span class="comment">#RPC端口, 仅当默认端口被占用时修改</span></span><br><span class="line">rpc-listen-port=6800</span><br><span class="line"><span class="comment"># 保存日志到文件，没有该文件用 touch 命令新建，不然会报错</span></span><br><span class="line"><span class="built_in">log</span>=/mnt/upan/aria2.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line">disable-ipv6=<span class="literal">true</span></span><br><span class="line"><span class="comment">#最大同时下载数(任务数), 路由建议值: 3</span></span><br><span class="line">max-concurrent-downloads=3</span><br><span class="line"><span class="comment">#断点续传</span></span><br><span class="line"><span class="built_in">continue</span>=<span class="literal">true</span></span><br><span class="line"><span class="comment">#同服务器连接数</span></span><br><span class="line">max-connection-per-server=10</span><br><span class="line"><span class="comment">#最小文件分片大小, 下载线程数上限取决于能分出多少片, 对于小文件重要</span></span><br><span class="line">min-split-size=10M</span><br><span class="line"><span class="comment">#单文件最大线程数, 路由建议值: 5</span></span><br><span class="line"><span class="built_in">split</span>=10</span><br><span class="line"><span class="comment">#下载速度限制</span></span><br><span class="line">max-overall-download-limit=0</span><br><span class="line"><span class="comment">#单文件速度限制</span></span><br><span class="line">max-download-limit=0</span><br><span class="line"><span class="comment">#上传速度限制</span></span><br><span class="line">max-overall-upload-limit=0</span><br><span class="line"><span class="comment">#单文件速度限制</span></span><br><span class="line">max-upload-limit=0</span><br><span class="line"><span class="comment">#断开速度过慢的连接</span></span><br><span class="line"><span class="comment">#lowest-speed-limit=0</span></span><br><span class="line"><span class="comment">#验证用，需要1.16.1之后的release版本</span></span><br><span class="line"><span class="comment">#referer=*</span></span><br><span class="line"></span><br><span class="line">input-file=/etc/aria2/aria2.session</span><br><span class="line">save-session=/etc/aria2/aria2.session</span><br><span class="line"><span class="comment">#定时保存会话，需要1.16.1之后的release版</span></span><br><span class="line">save-session-interval=60</span><br><span class="line"></span><br><span class="line"><span class="comment">#文件保存路径, 默认为当前启动位置(这里的下载目录具体还得看你自己是怎么设置的)</span></span><br><span class="line"><span class="built_in">dir</span>=/mnt/sda1/download</span><br><span class="line"><span class="comment">#文件缓存, 使用内置的文件缓存, 如果你不相信Linux内核文件缓存和磁盘内置缓存时使用, 需要1.16及以上版本</span></span><br><span class="line"><span class="comment">#disk-cache=0</span></span><br><span class="line"><span class="comment">#另一种Linux文件缓存方式, 使用前确保您使用的内核支持此选项, 需要1.15及以上版本(?)</span></span><br><span class="line"><span class="comment">#enable-mmap=true</span></span><br><span class="line"><span class="comment">#文件预分配, 能有效降低文件碎片, 提高磁盘性能. 缺点是预分配时间较长</span></span><br><span class="line"><span class="comment">#所需时间 none &lt; falloc ? trunc &lt;&lt; prealloc, falloc和trunc需要文件系统和内核支持</span></span><br><span class="line">file-allocation=none</span><br><span class="line"></span><br><span class="line"><span class="comment">#启用本地节点查找</span></span><br><span class="line">bt-enable-lpd=<span class="literal">true</span></span><br><span class="line"><span class="comment">#添加额外的tracker</span></span><br><span class="line"><span class="comment">#bt-tracker=&lt;URI&gt;,…</span></span><br><span class="line"><span class="comment">#单种子最大连接数</span></span><br><span class="line"><span class="comment">#bt-max-peers=55</span></span><br><span class="line"><span class="comment">#强制加密, 防迅雷必备</span></span><br><span class="line"><span class="comment">#bt-require-crypto=true</span></span><br><span class="line"><span class="comment">#当下载的文件是一个种子(以.torrent结尾)时, 自动下载BT</span></span><br><span class="line">follow-torrent=<span class="literal">true</span></span><br><span class="line"><span class="comment">#BT监听端口, 当端口屏蔽时使用</span></span><br><span class="line"><span class="comment">#listen-port=6881-6999</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#不确定是否需要，为保险起见，need more test</span></span><br><span class="line">enable-dht=<span class="literal">true</span></span><br><span class="line">bt-enable-lpd=<span class="literal">true</span></span><br><span class="line">enable-peer-exchange=<span class="literal">true</span></span><br><span class="line"><span class="comment">#修改特征</span></span><br><span class="line">user-agent=uTorrent/2210(25130)</span><br><span class="line">peer-id-prefix=-UT2210-</span><br><span class="line"><span class="comment">#修改做种设置, 允许做种</span></span><br><span class="line">seed-ratio=0</span><br><span class="line"><span class="comment">#保存会话</span></span><br><span class="line">force-save=<span class="literal">true</span></span><br><span class="line">bt-hash-check-seed=<span class="literal">true</span></span><br><span class="line">bt-seed-unverified=<span class="literal">true</span></span><br><span class="line">bt-save-metadata=<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><strong>把 aria2 加入开机启动</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi /etc/rc.local</span><br></pre></td></tr></table></figure>

<p><strong>在 rc.local 文件的 exit 0 前面加入以下内容</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">aria2c --conf-path=/etc/aria2/aria2/conf -D</span><br></pre></td></tr></table></figure>

<p>到此就完成了 Gargoyle for aria2 的安装</p>
<h2 id="Transmission-安装"><a href="#Transmission-安装" class="headerlink" title="Transmission 安装"></a>Transmission 安装</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">opkg update</span><br><span class="line">opkg install transmission-daemon transmission-web</span><br></pre></td></tr></table></figure>

<p><strong>加入开机启动</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/etc/init.d/transmission <span class="built_in">enable</span></span><br></pre></td></tr></table></figure>

<p><strong>开始运行 transmission</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/etc/init.d/transmission start</span><br></pre></td></tr></table></figure>

<p><strong>修改配置文件</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/etc/config/transmission</span><br></pre></td></tr></table></figure>

<p>一般只需要修改几个地方就行，比如 config_dir（这个是你的放配置目录）, download_dir（下载目录）, and incomplete_dir（未下载完成目录）</p>
<p><strong>官方例子</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">config transmission</span><br><span class="line">option <span class="built_in">enable</span> 1</span><br><span class="line">option config_dir <span class="string">&#x27;/etc/transmission&#x27;</span></span><br><span class="line">option alt_speed_down 50</span><br><span class="line">option alt_speed_enabled <span class="literal">false</span></span><br><span class="line">option alt_speed_time_begin  540</span><br><span class="line">option alt_speed_time_day 127</span><br><span class="line">option alt_speed_time_enabled <span class="literal">false</span></span><br><span class="line">option alt_speed_time_end 1020</span><br><span class="line">option alt_speed_up 50</span><br><span class="line">option bind_address_ipv4 <span class="string">&#x27;0.0.0.0&#x27;</span></span><br><span class="line">option bind_address_ipv6 <span class="string">&#x27;::&#x27;</span></span><br><span class="line">option blocklist_enabled <span class="literal">false</span></span><br><span class="line">option dht_enabled <span class="literal">true</span></span><br><span class="line">option download_dir <span class="string">&#x27;/mnt/sda4/&#x27;</span></span><br><span class="line">option encryption 1</span><br><span class="line">option incomplete_dir <span class="string">&#x27;/mnt/sda4/incomplete&#x27;</span></span><br><span class="line">option incomplete_dir_enabled <span class="literal">false</span></span><br><span class="line">option lazy_bitfield_enabled <span class="literal">true</span></span><br><span class="line">option lpd_enabled <span class="literal">false</span></span><br><span class="line">option message_level 2</span><br><span class="line">option open_file_limit 32</span><br><span class="line">option peer_limit_global 240</span><br><span class="line">option peer_limit_per_torrent 60</span><br><span class="line">option peer_port 51413</span><br><span class="line">option peer_port_random_high 65535</span><br><span class="line">option peer_port_random_low 49152</span><br><span class="line">option peer_port_random_on_start <span class="literal">false</span></span><br><span class="line">option peer_socket_tos 0</span><br><span class="line">option pex_enabled <span class="literal">true</span></span><br><span class="line">option port_forwarding_enabled <span class="literal">false</span></span><br><span class="line">option preallocation 1</span><br><span class="line">option proxy <span class="string">&quot;&quot;</span></span><br><span class="line">option proxy_auth_enabled <span class="literal">false</span></span><br><span class="line">option proxy_auth_password <span class="string">&#x27;&#x27;</span></span><br><span class="line">option proxy_auth_username <span class="string">&#x27;&#x27;</span></span><br><span class="line">option proxy_enabled <span class="literal">false</span></span><br><span class="line">option proxy_port 80</span><br><span class="line">option proxy_type 0</span><br><span class="line">option ratio_limit 2.0000</span><br><span class="line">option ratio_limit_enabled <span class="literal">false</span></span><br><span class="line">option rename_partial_files <span class="literal">true</span></span><br><span class="line">option rpc_authentication_required <span class="literal">false</span></span><br><span class="line">option rpc_bind_address <span class="string">&#x27;0.0.0.0&#x27;</span></span><br><span class="line">option rpc_enabled <span class="literal">true</span></span><br><span class="line">option rpc_password <span class="string">&#x27;&#x27;</span></span><br><span class="line">option rpc_port 9091</span><br><span class="line">option rpc_username <span class="string">&#x27;&#x27;</span></span><br><span class="line">option rpc_whitelist <span class="string">&#x27;*.*.*.*&#x27;</span>  <span class="comment"># 打不开请修改成这样</span></span><br><span class="line">option rpc_whitelist_enabled <span class="literal">true</span></span><br><span class="line">option script_torrent_done_enabled <span class="literal">false</span></span><br><span class="line">option script_torrent_done_filename <span class="string">&#x27;&#x27;</span></span><br><span class="line">option speed_limit_down 100</span><br><span class="line">option speed_limit_down_enabled <span class="literal">false</span></span><br><span class="line">option speed_limit_up 40</span><br><span class="line">option speed_limit_up_enabled <span class="literal">true</span></span><br><span class="line">option start_added_torrents <span class="literal">false</span></span><br><span class="line">option trash_original_torrent_files <span class="literal">false</span></span><br><span class="line">option <span class="built_in">umask</span> 18</span><br><span class="line">option upload_slots_per_torrent 14</span><br><span class="line">option watch_dir_enabled <span class="literal">false</span></span><br><span class="line">option watch_dir <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>


<h2 id="安装-Hd-idle-（硬盘休眠服务）"><a href="#安装-Hd-idle-（硬盘休眠服务）" class="headerlink" title="安装 Hd-idle （硬盘休眠服务）"></a>安装 Hd-idle （硬盘休眠服务）</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">opkg update</span><br><span class="line">opkg install hd-idle</span><br></pre></td></tr></table></figure>

<p><strong>修改配置文件</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi /etc/config/hd-idle</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">config <span class="string">&#x27;hd-idle&#x27;</span></span><br><span class="line">option <span class="string">&#x27;disk&#x27;</span> <span class="string">&#x27;sda&#x27;</span> <span class="comment"># 这里修改成你的下载目录</span></span><br><span class="line">option <span class="string">&#x27;enable_debug&#x27;</span> <span class="string">&#x27;0&#x27;</span> </span><br><span class="line">option <span class="string">&#x27;enabled&#x27;</span> <span class="string">&#x27;0&#x27;</span></span><br><span class="line">option <span class="string">&#x27;idle_time_unit&#x27;</span> <span class="string">&#x27;minutes&#x27;</span> <span class="comment"># 默认是分钟，其它选项有&#x27;days&#x27;, &#x27;hours&#x27;, &#x27;minutes&#x27; or &#x27;seconds&#x27;</span></span><br><span class="line">option <span class="string">&#x27;idle_time_interval&#x27;</span> <span class="string">&#x27;10&#x27;</span> <span class="comment"># 修改你需要休眠的时间</span></span><br></pre></td></tr></table></figure>























]]></content>
      <categories>
        <category>OpenWrt</category>
      </categories>
      <tags>
        <tag>OpenWrt</tag>
      </tags>
  </entry>
  <entry>
    <title>git 配置笔记</title>
    <url>/2015/09/11/git-configuration-notes/</url>
    <content><![CDATA[<h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><h3 id="初次运行-git-前的配置"><a href="#初次运行-git-前的配置" class="headerlink" title="初次运行 git 前的配置"></a>初次运行 git 前的配置</h3><p>Git 提供了一个叫做 git config 的工具（译注：实际是 git-config 命令，只不过可以通过 git 加一个名字来呼叫此命令。），专门用来配置或读取相应的工作环境变量。而正是由这些环境变量，决定了 Git 在各个环节的具体工作方式和行为。这些变量可以存放在以下三个不同的地方：</p>
<p><code>/etc/gitconfig</code></p>
<p>系统中对所有用户都普遍适用的配置。若使用 git config 时用 –system 选项，读写的就是这个文件。</p>
<p><code>~/.gitconfig</code></p>
<p>用户目录下的配置文件只适用于该用户。若使用 git config 时用 –global 选项，读写的就是这个文件。</p>
<p><code>.git/config</code></p>
<p>当前项目的 Git 目录中的配置文件（也就是工作目录中的 .git&#x2F;config 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 .git&#x2F;config 里的配置会覆盖 &#x2F;etc&#x2F;gitconfig 中的同名变量。</p>
<span id="more"></span>

<h4 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h4><p>第一个要配置的是你个人的用户名称和电子邮件地址。这两条配置很重要，每次 Git 提交时都会引用这两条信息，说明是谁提交了更新，所以会随更新内容一起被永久纳入历史记录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;John Doe&quot;</span><br><span class="line">$ git config --global user.email johndoe@example.com</span><br></pre></td></tr></table></figure>
<p>如果用了 –global 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 –global 选项重新配置即可，新的设定保存在当前项目的 .git&#x2F;config 文件里。</p>
<h2 id="git-基础"><a href="#git-基础" class="headerlink" title="git 基础"></a>git 基础</h2><h3 id="取得项目的-git-仓库"><a href="#取得项目的-git-仓库" class="headerlink" title="取得项目的 git 仓库"></a>取得项目的 git 仓库</h3><h4 id="在工作目录初始化新仓库"><a href="#在工作目录初始化新仓库" class="headerlink" title="在工作目录初始化新仓库"></a>在工作目录初始化新仓库</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure>
<h4 id="从现在仓库克隆"><a href="#从现在仓库克隆" class="headerlink" title="从现在仓库克隆"></a>从现在仓库克隆</h4><p><code>git clone</code> 克隆仓库的命令格式为 <code>git clone [url]</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git clone git://github.com/schacon/grit.git</span><br></pre></td></tr></table></figure>
<p>这会在当前目录创建一个名为<code>grit</code>的目录，在克隆地时候，自己定义要新建项目的目录名称时，可以在上面命令末尾指定新的名字。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git clone git://github.com/schacon/grit.git mygrit</span><br></pre></td></tr></table></figure>

<h3 id="记录每次更新到仓库"><a href="#记录每次更新到仓库" class="headerlink" title="记录每次更新到仓库"></a>记录每次更新到仓库</h3><h4 id="检查当前文件状态"><a href="#检查当前文件状态" class="headerlink" title="检查当前文件状态"></a>检查当前文件状态</h4><p><code>git status</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working directory clean</span><br></pre></td></tr></table></figure>
<h4 id="跟踪新文件"><a href="#跟踪新文件" class="headerlink" title="跟踪新文件"></a>跟踪新文件</h4><p><code>git add</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git add README</span><br></pre></td></tr></table></figure>
<p>此时再运行 <code>git status</code> 命令，会看到 README 文件已被跟踪，并处于暂存状态：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">        new file:   README</span><br></pre></td></tr></table></figure>

<h4 id="暂存已修改文件"><a href="#暂存已修改文件" class="headerlink" title="暂存已修改文件"></a>暂存已修改文件</h4><p>要暂存已修改文件，需要运行 <code>git add</code> 命令</p>
<h4 id="忽略某些文件"><a href="#忽略某些文件" class="headerlink" title="忽略某些文件"></a>忽略某些文件</h4><p>创建一个名为<code>.gitignore</code> 的文件，列出要忽略的文件模式</p>
<p>文件 .gitignore 的格式规范如下：</p>
<ul>
<li>所有空行或者以注释符号 ＃ 开头的行都会被 Git 忽略。</li>
<li>可以使用标准的 glob 模式匹配。</li>
<li>匹配模式最后跟反斜杠（&#x2F;）说明要忽略的是目录。</li>
<li>要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 此为注释 – 将被 Git 忽略</span><br><span class="line"># 忽略所有 .a 结尾的文件</span><br><span class="line">*.a</span><br><span class="line"># 但 lib.a 除外</span><br><span class="line">!lib.a</span><br><span class="line"># 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO</span><br><span class="line">/TODO</span><br><span class="line"># 忽略 build/ 目录下的所有文件</span><br><span class="line">build/</span><br><span class="line"># 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span><br><span class="line">doc/*.txt</span><br><span class="line"># ignore all .txt files in the doc/ directory</span><br><span class="line">doc/**/*.txt</span><br></pre></td></tr></table></figure>

<h4 id="查看已暂存和未暂存的更新"><a href="#查看已暂存和未暂存的更新" class="headerlink" title="查看已暂存和未暂存的更新"></a>查看已暂存和未暂存的更新</h4><p><code>git status</code> 列出了修改过的文件。</p>
<p>未暂存的文件更新了哪些部分，可以用 <code>git diff</code> 命令。</p>
<p>已经暂存文件 - 上次提交时的快照之间的差异，<code>git diff --cached</code>(1.6.1 及更高版本还允许使用 <code>git diff --staged</code>)</p>
<h4 id="提交更新"><a href="#提交更新" class="headerlink" title="提交更新"></a>提交更新</h4><p><code>git commit</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git commit</span><br></pre></td></tr></table></figure>
<p>这种方式会启动文本编辑器以便输入本次提交的说明.</p>
<p>另外也可以用 <code>-m</code> 参数后跟提交说明的方式，在一行命令中提交更新：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git commit -m &quot;本次提交的说明文字。&quot;</span><br></pre></td></tr></table></figure>

<h4 id="跳过使用暂存区域"><a href="#跳过使用暂存区域" class="headerlink" title="跳过使用暂存区域"></a>跳过使用暂存区域</h4><p>给 <code>git commit</code> 加上 <code>-a</code> 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 <code>git add</code> 步骤</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git commit -a -m &#x27;added new benchmarks&#x27;</span><br></pre></td></tr></table></figure>
<h4 id="移除文件"><a href="#移除文件" class="headerlink" title="移除文件"></a>移除文件</h4><p>手工移除文件时：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ rm grit.gemspec</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">        deleted:    grit.gemspec</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure>

<p><code>git rm</code> 记录此次移除文件，提交时，该文件不会纳入版本控制。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git rm grit.gemspec</span><br><span class="line">rm &#x27;grit.gemspec&#x27;</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">        deleted:    grit.gemspec</span><br></pre></td></tr></table></figure>
<p>想把文件从 Git 仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中。换句话说，仅是从跟踪清单中删除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git rm --cached readme.txt</span><br></pre></td></tr></table></figure>

<h4 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h4><p>在 Git 中对文件改名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git mv file_from file_to</span><br></pre></td></tr></table></figure>

<h3 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h3><p><code>git log</code></p>
<p>默认不用任何参数的话，git log 会按提交时间列出所有的更新，最近的更新排在最上面</p>
<p>git log 选项:</p>
<ul>
<li><code>-p</code>	按补丁格式显示每个更新之间的差异。</li>
<li><code>--word-diff</code>按 word diff 格式显示差异。</li>
<li><code>--stat</code>显示每次更新的文件修改统计信息。</li>
<li><code>--shortstat</code>只显示 –stat 中最后的行数修改添加移除统计。</li>
<li><code>--name-only</code>仅在提交信息后显示已修改的文件清单。</li>
<li><code>--name-status</code>显示新增、修改、删除的文件清单。</li>
<li><code>--abbrev-commit</code>仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。</li>
<li><code>--relative-date</code>使用较短的相对时间显示（比如，“2 weeks ago”）。</li>
<li><code>--graph</code>显示 ASCII 图形表示的分支合并历史。</li>
<li><code>--pretty</code>使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）。</li>
<li><code>--oneline``--pretty=oneline</code> <code>--abbrev-commit</code> 的简化用法。</li>
<li><code>-2</code> 则仅显示最近的两次更新;</li>
</ul>
<h3 id="撤消操作"><a href="#撤消操作" class="headerlink" title="撤消操作"></a>撤消操作</h3><h4 id="修改最后一次提交"><a href="#修改最后一次提交" class="headerlink" title="修改最后一次提交"></a>修改最后一次提交</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git commit --amend</span><br></pre></td></tr></table></figure>

<h4 id="取消已经暂存的文件"><a href="#取消已经暂存的文件" class="headerlink" title="取消已经暂存的文件"></a>取消已经暂存的文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset HEAD &lt;file&gt;</span><br></pre></td></tr></table></figure>

<h4 id="取消对文件的修改"><a href="#取消对文件的修改" class="headerlink" title="取消对文件的修改"></a>取消对文件的修改</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git checkout -- benchmarks.rb</span><br></pre></td></tr></table></figure>

<h3 id="远程仓库的使用"><a href="#远程仓库的使用" class="headerlink" title="远程仓库的使用"></a>远程仓库的使用</h3><h4 id="查看当前的远程库"><a href="#查看当前的远程库" class="headerlink" title="查看当前的远程库"></a>查看当前的远程库</h4><p><code>git remote</code></p>
<p>它会列出每个远程库的简短名字。在克隆完某个项目后，至少可以看到一个名为 origin 的远程库，Git 默认使用这个名字来标识你所克隆的原始仓库</p>
<p>-v 选项,显示对应的克隆地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origin  git://github.com/schacon/ticgit.git (fetch)</span><br><span class="line">origin  git://github.com/schacon/ticgit.git (push)</span><br></pre></td></tr></table></figure>
<h4 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h4><p>要添加一个新的远程仓库，可以指定一个简单的名字，以便将来引用，运行 <code>git remote add [shortname] [url]</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git remote</span><br><span class="line">origin</span><br><span class="line">$ git remote add pb git://github.com/paulboone/ticgit.git</span><br><span class="line">$ git remote -v</span><br><span class="line">origin  git://github.com/schacon/ticgit.git</span><br><span class="line">pb  git://github.com/paulboone/ticgit.git</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Web Developer</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 GitHub Action 自动部署 Hexo</title>
    <url>/2021/04/01/github-action-automatic-hexo/</url>
    <content><![CDATA[<blockquote>
<p>注意：需要创建两个仓库</p>
</blockquote>
<ul>
<li><code>your_blog_name.github.io</code>：编译后的仓库（本次教程没有涉及，网上搜下就有）</li>
<li><code>hexo_blog</code>： <code>hexo</code> 生成 <code>blog</code> 的仓库（本次教程重点会在这里）</li>
</ul>
<span id="more"></span>

<h2 id="创建个人访问令牌"><a href="#创建个人访问令牌" class="headerlink" title="创建个人访问令牌"></a>创建个人访问令牌</h2><p><img  
                       lazyload
                       alt="image"
                       data-src="/images/github-action-automatic-hexo/01.png"
                        alt="access-token-1"
                 ></p>
<p><strong>注意要勾选<code>repo</code>权限和<code>workflow</code>权限</strong></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="/images/github-action-automatic-hexo/02.png"
                        alt="access-token-2"
                 ></p>
<blockquote>
<p>注意：生成<code>TOKEN</code>后要复制后保存好，因为在下次进来时这个值就看不到了</p>
</blockquote>
<p><img  
                       lazyload
                       alt="image"
                       data-src="/images/github-action-automatic-hexo/02-01.png"
                        alt="access-token-2-01"
                 ></p>
<h2 id="新建-Hexo-Blog-仓库"><a href="#新建-Hexo-Blog-仓库" class="headerlink" title="新建 Hexo Blog 仓库"></a>新建 Hexo Blog 仓库</h2><p>建议使用<code>private</code>来建，防止其它人克隆</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="/images/github-action-automatic-hexo/03.png"
                        alt="access-token-3"
                 ></p>
<h2 id="设置仓库的secrets"><a href="#设置仓库的secrets" class="headerlink" title="设置仓库的secrets"></a>设置仓库的<code>secrets</code></h2><p><img  
                       lazyload
                       alt="image"
                       data-src="/images/github-action-automatic-hexo/04.png"
                        alt="access-token-4"
                 ></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="/images/github-action-automatic-hexo/05.png"
                        alt="access-token-5"
                 ></p>
<p>取名为 <code>ACCESS_TOKEN</code> 后面部署的时候会用到</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="/images/github-action-automatic-hexo/06.png"
                        alt="access-token-6"
                 ></p>
<h2 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置 _config.yml"></a>配置 <code>_config.yml</code></h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">https://ACCESS_TOKEN@github.com/your_github_name/your_blog_name.github.io.git</span> <span class="comment">#这里的ACCESS_TOKEN就是我们刚刚设置的名称</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span> <span class="comment">#此处修改为自己存放 your_blog_name.github.io 的分支</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure>

<h2 id="创建-Workflow"><a href="#创建-Workflow" class="headerlink" title="创建 Workflow"></a>创建 Workflow</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">Deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>]</span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">GIT_USER:</span> <span class="string">your_github_name</span> <span class="comment">#你的 github 用户名</span></span><br><span class="line">  <span class="attr">GIT_EMAIL:</span> <span class="string">your@email.com</span> <span class="comment">#你的 github 邮箱</span></span><br><span class="line">  <span class="attr">DEPLOY_BRANCH:</span> <span class="string">main</span> <span class="comment">#此处修改为自己存放 Hexo 源文件的分支</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Download</span> <span class="string">Source</span> <span class="string">file</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.DEPLOY_BRANCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Node.js</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&quot;12&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">env</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">ACCESS_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACCESS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          git config --global user.email $GIT_USER</span></span><br><span class="line"><span class="string">          git config --global user.name $GIT_EMAIL</span></span><br><span class="line"><span class="string">          sed -i &quot;s/ACCESS_TOKEN/$ACCESS_TOKEN/g&quot; ./_config.yml</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">Setup</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm install hexo-cli -g</span></span><br><span class="line"><span class="string">          npm install</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          hexo clean</span></span><br><span class="line"><span class="string">          hexo deploy</span></span><br></pre></td></tr></table></figure>

<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>默认推送后就会执行 <code>Workflow</code></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="/images/github-action-automatic-hexo/07.png"
                        alt="access-token-7"
                 ></p>
]]></content>
      <categories>
        <category>GitHub Action</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2015/08/25/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="http://hexo.io/" >Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link"   href="http://hexo.io/docs/" >documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="http://hexo.io/docs/troubleshooting.html" >troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub<i class="fas fa-external-link-alt"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="http://hexo.io/docs/writing.html" >Writing<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="http://hexo.io/docs/server.html" >Server<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="http://hexo.io/docs/generating.html" >Generating<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="http://hexo.io/docs/deployment.html" >Deployment<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>高精度加法</title>
    <url>/2017/07/02/high-precision-addition/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> addStrings = <span class="keyword">function</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  num1 = num1.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">map</span>(<span class="function"><span class="params">it</span> =&gt;</span> +it) <span class="comment">// 字符串转成数组</span></span><br><span class="line">  num2 = num2.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">map</span>(<span class="function"><span class="params">it</span> =&gt;</span> +it) <span class="comment">// 字符串转成数组</span></span><br><span class="line">  <span class="keyword">var</span> len1 = num1.<span class="property">length</span></span><br><span class="line">  <span class="keyword">var</span> len2 = num2.<span class="property">length</span></span><br><span class="line">  <span class="keyword">var</span> len = <span class="number">1</span> + (len1 &gt; len2 ? len1 : len2) <span class="comment">// 结果数组的长度</span></span><br><span class="line">  <span class="keyword">var</span> myArray = <span class="keyword">new</span> <span class="title class_">Array</span>(len).<span class="title function_">fill</span>(<span class="number">0</span>) <span class="comment">// 向结果数组填充 0</span></span><br><span class="line">  <span class="keyword">var</span> i = len1 - <span class="number">1</span>,</span><br><span class="line">    j = len2 - <span class="number">1</span>,</span><br><span class="line">    k = len - <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> (k &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    num1i = num1[i] === <span class="literal">undefined</span> ? <span class="number">0</span> : num1[i] <span class="comment">// 任何一个数读不到值时，把值变为0</span></span><br><span class="line">    num2j = num2[j] === <span class="literal">undefined</span> ? <span class="number">0</span> : num2[j] <span class="comment">// 任何一个数读不到值时，把值变为0</span></span><br><span class="line">    <span class="keyword">var</span> element = myArray[k] + num1i + num2j</span><br><span class="line">    myArray[k] = element % <span class="number">10</span> <span class="comment">// 计算结果数组的个位数</span></span><br><span class="line">    myArray[k - <span class="number">1</span>] = (element - myArray[k]) / <span class="number">10</span> <span class="comment">// 计算结果数组的十位数</span></span><br><span class="line">    k--</span><br><span class="line">    j--</span><br><span class="line">    i--</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (myArray[<span class="number">0</span>] === <span class="number">0</span>) &#123; <span class="comment">// 如果结果数组没进位就删除</span></span><br><span class="line">    myArray.<span class="title function_">shift</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (myArray.<span class="property">length</span> === <span class="number">0</span>) &#123; <span class="comment">// 数组的长度为零就返回0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;0&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> myArray.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>) <span class="comment">// 把数组转成字符串返回</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Web Developer</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>用了四年的 iPhone11</title>
    <url>/2023/11/25/iPhone11/</url>
    <content><![CDATA[<span id="more"></span>

<p><img  
                       lazyload
                       alt="image"
                       data-src="https://img.xmit.eu.org/gh/zhen-ke/img@main/IMG_5620.1u8tc5cdm28w.jpg"
                        alt="iPhone11-1"
                 ></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://img.xmit.eu.org/gh/zhen-ke/img@main/IMG_5617.54af827614s0.jpg"
                        alt="iPhone11-2"
                 ></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://img.xmit.eu.org/gh/zhen-ke/img@main/IMG_5618.6k8cj8culxc.jpg"
                        alt="iPhone11-3"
                 ></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://img.xmit.eu.org/gh/zhen-ke/img@main/IMG_5619.29wboge2sk4k.jpg"
                        alt="iPhone11-4"
                 ></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://img.xmit.eu.org/gh/zhen-ke/img@main/i4Tools_09C61ZfKUR.webmg5z56n4.jpg"
                        alt="iPhone11-5"
                 ></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://img.xmit.eu.org/gh/zhen-ke/img@main/IMG_5616.258n1qe8db9c.jpg"
                        alt="iPhone11-6"
                 ></p>
]]></content>
      <categories>
        <category>数码</category>
      </categories>
      <tags>
        <tag>苹果</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 对象类型详解笔记</title>
    <url>/2016/04/16/javascript-detailed-explanations-of-object-types/</url>
    <content><![CDATA[<h2 id="JavaScript-的数据类型"><a href="#JavaScript-的数据类型" class="headerlink" title="JavaScript 的数据类型"></a>JavaScript 的数据类型</h2><ul>
<li>引用类型（即 Object 类型）</li>
<li>基本类型（原始类型）<ul>
<li>Number</li>
<li>String</li>
<li>Boolean</li>
<li>Undefined</li>
<li>Null</li>
</ul>
</li>
</ul>
<h2 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象"></a>什么是对象</h2><p>对象是属性的无序集合，每个属性都是一个名&#x2F;值对。这个列表中的每一项被称为属性（如果是函数则被称为方法）。<br>一个简单的对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;xiaowang&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">28</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上例中的属性名是name、age，相对应的值是xianwang、28</p>
<span id="more"></span>

<h2 id="引用数据类型和原始数据类型两者的区别"><a href="#引用数据类型和原始数据类型两者的区别" class="headerlink" title="引用数据类型和原始数据类型两者的区别"></a>引用数据类型和原始数据类型两者的区别</h2><p>引用类型的值是按引用访问的，而原始类型按值访问的。<br>原始类类型复制变量值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 =<span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = num1;</span><br><span class="line">num1 = <span class="number">9</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num1); <span class="comment">// 9</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num2); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>
<p>引用类型复制变量值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">obj1.<span class="property">name</span> = <span class="string">&#x27;xiaowang&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> obj1 = obj2;</span><br><span class="line">obj1.<span class="property">name</span> = <span class="string">&#x27;xiaoming&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">name</span>); <span class="comment">// xiaoming</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">name</span>); <span class="comment">// xiaoming</span></span><br></pre></td></tr></table></figure>
<p>上面这个例子中，当一个变量向另一个变量复制引用值时，由于变量对象中存储的是引用，所以这个值的副本实际上是一个指针，指向存储在堆中的一个对象。复制操作结束后，两个变量实际将引用同一个对象，因此，改变其中一个变量，就会影响另一个变量。</p>
<h2 id="对象属性的特性"><a href="#对象属性的特性" class="headerlink" title="对象属性的特性"></a>对象属性的特性</h2><p><strong>数据属性：</strong></p>
<ul>
<li>Configurable : 指定这个对象的属性是否可以被删除或修改。</li>
<li>Enumerable : 指定这个对象的属性能否通过 for - in 循环取得。</li>
<li>Writable : 指定这个对象属性是否可以被修改。</li>
<li>Value : 指定这个对象的属性值。默认是Undefined</li>
</ul>
<p><strong>修改对象属性特性的方法：Object.defineProperty()</strong><br>参数：</p>
<ul>
<li>属性所在的对象</li>
<li>属性的名字</li>
<li>描述符（必须是Configurable、Enumerable、Writable等中一个或者多个）</li>
</ul>
<h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><p>创建对象的两种常用方法：<br>对象字面量：直接使用頞量进行创建</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;xiaowang&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">28</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">sayAge</span>:<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对象构造函数：使用new关键字来调用构造函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Person</span> = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="title class_">Person</span>.<span class="property">name</span> = <span class="string">&#x27;xiaowang&#x27;</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property">age</span> = <span class="number">28</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property">sayAge</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="对象创建实践"><a href="#对象创建实践" class="headerlink" title="对象创建实践"></a>对象创建实践</h2><p>用程序展示水果和安的详细信息</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mangoFruit = &#123;</span><br><span class="line"> <span class="attr">color</span>: <span class="string">&#x27;yellow&#x27;</span>,</span><br><span class="line"> <span class="attr">sweetness</span>: <span class="number">8</span>,</span><br><span class="line"> fruitName : <span class="string">&#x27;Mango&#x27;</span>,</span><br><span class="line"> <span class="attr">nativeToLand</span>: [<span class="string">&quot;South America&quot;</span>, <span class="string">&quot;Central America&quot;</span>],</span><br><span class="line"></span><br><span class="line"> <span class="attr">showName</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;This is &#x27;</span> + <span class="variable language_">this</span>.<span class="property">fruitName</span>);</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="attr">native</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">nativeToLand</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">eachCountry</span>)&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Grow in:&#x27;</span> + eachCountry);</span><br><span class="line">  &#125;)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">mangoFruit.<span class="title function_">native</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Grow in:South America</span></span><br><span class="line"><span class="comment">// Grow in:Central America</span></span><br></pre></td></tr></table></figure>
<p>以上例子有个明显的问题，如果有多个水果，就得添加多次相同的代码。<br>为了解决多个相似对象的问题，下面是两种创建对象的常用模式：</p>
<h3 id="构造方法模式"><a href="#构造方法模式" class="headerlink" title="构造方法模式"></a>构造方法模式</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Fruit</span>(<span class="params">theColor, theSweetness, theFruitName, theNativeToLand</span>)&#123;</span><br><span class="line"> <span class="variable language_">this</span>.<span class="property">color</span> = theColor,</span><br><span class="line"> <span class="variable language_">this</span>.<span class="property">sweetness</span> = theSweetness,</span><br><span class="line"> <span class="variable language_">this</span>.<span class="property">fruitName</span> = theFruitName,</span><br><span class="line"> <span class="variable language_">this</span>.<span class="property">nativeToLand</span>= theNativeToLand,</span><br><span class="line"></span><br><span class="line"> <span class="variable language_">this</span>.<span class="property">showName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;This is &#x27;</span> + <span class="variable language_">this</span>.<span class="property">fruitName</span>);</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="variable language_">this</span>.<span class="property">nativeTo</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">nativeToLand</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">a</span>)&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Grow in:&#x27;</span> + a);</span><br><span class="line">  &#125;)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> mangoFruit = <span class="keyword">new</span> <span class="title class_">Fruit</span> (<span class="string">&quot;Yellow&quot;</span>, <span class="number">8</span>, <span class="string">&quot;Mango&quot;</span>, [<span class="string">&quot;South America&quot;</span>, <span class="string">&quot;Central America&quot;</span>, <span class="string">&quot;West Africa&quot;</span>]);</span><br><span class="line">mangoFruit.<span class="title function_">nativeTo</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Grow in:South America</span></span><br><span class="line"><span class="comment">// Grow in:Central America</span></span><br><span class="line"><span class="comment">// Grow in:West Africa</span></span><br></pre></td></tr></table></figure>

<h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Fruit</span> () &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Fruit</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">color</span> = <span class="string">&quot;Yellow&quot;</span>;</span><br><span class="line"><span class="title class_">Fruit</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sweetness</span> = <span class="number">7</span>;</span><br><span class="line"><span class="title class_">Fruit</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">fruitName</span> = <span class="string">&quot;Generic Fruit&quot;</span>;</span><br><span class="line"><span class="title class_">Fruit</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">nativeToLand</span> = <span class="string">&quot;USA&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Fruit</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">showName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;This is a &quot;</span> + <span class="variable language_">this</span>.<span class="property">fruitName</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Fruit</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">nativeTo</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Grown in:&quot;</span> + <span class="variable language_">this</span>.<span class="property">nativeToLand</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mangoFruit = <span class="keyword">new</span> <span class="title class_">Fruit</span> ();</span><br><span class="line">mangoFruit.<span class="title function_">showName</span>();</span><br><span class="line">mangoFruit.<span class="title function_">nativeTo</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// This is a Generic Fruit</span></span><br><span class="line"><span class="comment">// Grown in:USA</span></span><br></pre></td></tr></table></figure>
<h2 id="访问对象中的属性"><a href="#访问对象中的属性" class="headerlink" title="访问对象中的属性"></a>访问对象中的属性</h2><p>访问对象属性的两种主要方法是点记法和中括号记法。<br>点记号</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;xiaowang&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">28</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property">name</span>); <span class="comment">// xiaowang</span></span><br></pre></td></tr></table></figure>
<p>中括号记</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;xiaowang&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">28</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>[<span class="string">&quot;name&quot;</span>]); <span class="comment">// xiaowang</span></span><br></pre></td></tr></table></figure>


<h2 id="自身属性和继承属性"><a href="#自身属性和继承属性" class="headerlink" title="自身属性和继承属性"></a>自身属性和继承属性</h2><p>对象拥有自身属性和继承属性。自身属性是直接定义在对象上的属性，而继承属性是从Object的Prototype继承的属性。</p>
<p><strong>为了确写一个对象是否拥有某个属性（不管是自身属性还是继承属性），可以使用in操作符</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;xiaowang&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">28</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 自身属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> <span class="title class_">Person</span>); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 继承属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;toString&#x27;</span> <span class="keyword">in</span> <span class="title class_">Person</span>); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 不存在的属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;gg&#x27;</span> <span class="keyword">in</span> <span class="title class_">Person</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p><strong>为了确定一个对象是否拥有一个特定的自身属性，可以使用hasOwnProperty方法</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;xiaowang&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">28</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 自身属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;name&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 继承属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;toString&quot;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p><strong>访问和枚举对象的属性</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;xiaowang&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">28</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> <span class="title class_">Person</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key); <span class="comment">// name age</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>访问继承的属性</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;xiaowang&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Person1</span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="title class_">Person1</span>.<span class="property">height</span> = <span class="number">123</span>;</span><br><span class="line"><span class="title class_">Person1</span>.<span class="property">width</span> = <span class="number">345</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> <span class="title class_">Person1</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key); <span class="comment">// name height widht</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="删除对象中的属性"><a href="#删除对象中的属性" class="headerlink" title="删除对象中的属性"></a>删除对象中的属性</h2><p>可以使用delete操作符来删除对象中的属性。我们不能删除继承的属性，同时也不能删除Configurable特性被设置为false的对象属性。要删除继承的属性，必须从Prototype对象中删除（也就是定义这些属性的地方）。并且，我们也不能删除全局对象中的属性。</p>
<p>删除成功的时候，delete操作符会返回true。令人意外的是，当要删除的属性不存在，或者不能被删除（即不是自身的属性或者Configurable特性被设置为false）时， delete操作符也会返回true。</p>
<p>示例代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;xiaowang&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">28</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span> <span class="title class_">Person</span>.<span class="property">name</span>; <span class="comment">// 删除自带属性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> <span class="title class_">Person</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key); <span class="comment">// age</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="title class_">Person</span>.<span class="property">toString</span>; <span class="comment">// true 因为toString是继承的属性，所以它不会被删除</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property">toString</span>); <span class="comment">// 能正常使用，因为继承的属性无法删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果一个属性是对象实例的自身属性，则我们可以删除它。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;xiaowang&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Person1</span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="title class_">Person1</span>.<span class="property">height</span> = <span class="number">123</span>;</span><br><span class="line"><span class="title class_">Person1</span>.<span class="property">width</span> = <span class="number">345</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person1</span>.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;name&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除自身属性</span></span><br><span class="line"><span class="keyword">delete</span> <span class="title class_">Person1</span>.<span class="property">name</span>; <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person1</span>.<span class="property">name</span>);<span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 但是name属性仍然存在于Person函数中</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Person2</span> = <span class="keyword">new</span> <span class="title class_">Person</span> ();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person2</span>.<span class="property">name</span>); <span class="comment">// xiaowang</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在Person函数prototype中定义了一个属性</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">29</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person1</span>.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;age&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person1</span>.<span class="property">age</span>); <span class="comment">// 29</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 尝试删除继承的age属性</span></span><br><span class="line"><span class="keyword">delete</span> <span class="title class_">Person1</span>.<span class="property">age</span>; <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person1</span>.<span class="property">age</span>); <span class="comment">// 29</span></span><br></pre></td></tr></table></figure>

<h2 id="序列化和反序列化对象"><a href="#序列化和反序列化对象" class="headerlink" title="序列化和反序列化对象"></a>序列化和反序列化对象</h2><p>为了在HTTP中传递对象或者将对象转化成字符串，我们必须将对象序列化（将其转化为字符串）。我们可以使用JSON.stringify来序列化对象。要注意的是，在ECMAScript 5之前的版本，我们要使用json2库来获得JSON.stringify函数。在ECMAScript 5中，这个函数已经成为标准函数。</p>
<p>为了将反序列化对象（即，将字符串转化成对象），可以使用JSON.parse函数来完成。同样，在第5版之前要从json2库中获取这个函数，在第5版中已经加入这个标准函数。</p>
<p>示例代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> christmasList = &#123;<span class="attr">mike</span>:<span class="string">&quot;Book&quot;</span>, <span class="attr">jason</span>:<span class="string">&quot;sweater&quot;</span>, <span class="attr">chelsea</span>:<span class="string">&quot;iPad&quot;</span> &#125;</span><br><span class="line"><span class="title class_">JSON</span>.<span class="property">stringify</span> (christmasList);</span><br><span class="line"><span class="comment">// Prints this string:</span></span><br><span class="line"><span class="comment">// &quot;&#123;&quot;mike&quot;:&quot;Book&quot;,&quot;jason&quot;:&quot;sweater&quot;,&quot;chels&quot;:&quot;iPad&quot;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// To print a stringified object with formatting, add &quot;null&quot; and &quot;4&quot; as parameters:</span></span><br><span class="line"><span class="title class_">JSON</span>.<span class="property">stringify</span> (christmasList, <span class="literal">null</span>, <span class="number">4</span>);</span><br><span class="line"><span class="comment">// &quot;&#123;</span></span><br><span class="line"><span class="comment">//      &quot;mike&quot;: &quot;Book&quot;,</span></span><br><span class="line"><span class="comment">//      &quot;jason&quot;: &quot;sweater&quot;,</span></span><br><span class="line"><span class="comment">//      &quot;chels&quot;: &quot;iPad&quot;</span></span><br><span class="line"><span class="comment">//  &#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JSON.parse Examples</span></span><br><span class="line"><span class="comment">// The following is a JSON string, so we cannot access the properties with dot notation (like christmasListStr.mike)</span></span><br><span class="line"><span class="keyword">var</span> christmasListStr = <span class="string">&#x27;&#123;&quot;mike&quot;:&quot;Book&quot;,&quot;jason&quot;:&quot;sweater&quot;,&quot;chels&quot;:&quot;iPad&quot;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Let’s convert it to an object</span></span><br><span class="line"><span class="keyword">var</span> christmasListObj = <span class="title class_">JSON</span>.<span class="property">parse</span> (christmasListStr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Now that it is an object, we use dot notation</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(christmasListObj.<span class="property">mike</span>); <span class="comment">// Book</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Web Developer</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript &amp;&amp; 与 || 操作符运用</title>
    <url>/2016/03/10/javascript-logical-and-logical-or-operator-usage/</url>
    <content><![CDATA[<h2 id="逻辑与（-）操作符"><a href="#逻辑与（-）操作符" class="headerlink" title="逻辑与（&amp;&amp;）操作符"></a>逻辑与（&amp;&amp;）操作符</h2><p><strong>高级程序设计对<code>&amp;&amp;</code>的解释是，如果第一个操作数能够决定结果，则不会再对第二个操作数求值。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="literal">true</span> &amp;&amp; <span class="literal">true</span>;     <span class="comment">// =&gt; true</span></span><br><span class="line"><span class="literal">true</span> &amp;&amp; <span class="literal">false</span>;    <span class="comment">// =&gt; false</span></span><br><span class="line"><span class="literal">false</span> &amp;&amp; <span class="literal">true</span>;    <span class="comment">// =&gt; false</span></span><br><span class="line"><span class="literal">false</span> &amp;&amp; <span class="literal">false</span>;   <span class="comment">// =&gt; false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> result = (a &amp;&amp; <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);     <span class="comment">// =&gt; 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> result = (a &amp;&amp; <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);     <span class="comment">// =&gt; 3</span></span><br></pre></td></tr></table></figure>
<p>逻辑与（&amp;&amp;）操作符运算规则是：如果第一个操作数为’假‘，则返回这个操作数，反之则返回第二个操作数。</p>
<span id="more"></span>

<h2 id="逻辑或（-）操作符"><a href="#逻辑或（-）操作符" class="headerlink" title="逻辑或（||）操作符"></a>逻辑或（||）操作符</h2><p><strong>高级程序设计对<code>||</code>的解释是，如果第一个操作数为<code>true</code>，则不会再对第二个操作数求值。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="literal">true</span> || <span class="literal">true</span>;     <span class="comment">// =&gt; true</span></span><br><span class="line"><span class="literal">true</span> || <span class="literal">false</span>;    <span class="comment">// =&gt; true</span></span><br><span class="line"><span class="literal">false</span> || <span class="literal">true</span>;    <span class="comment">// =&gt; true</span></span><br><span class="line"><span class="literal">false</span> || <span class="literal">false</span>;   <span class="comment">// =&gt; false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> result = (a || <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);      <span class="comment">// =&gt; 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> result = (a || <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);      <span class="comment">// =&gt; 1</span></span><br></pre></td></tr></table></figure>
<p>逻辑或（||）操作符运算规则是：如果第一个操作数为’真‘，则返回这个操作数，反之则返回第二个操作数。</p>
]]></content>
      <categories>
        <category>Web Developer</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery添加自定义函数的两种方法</title>
    <url>/2017/12/02/jquery-extend/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 增加插件方法，$(&quot;&quot;). 选中元素后直接操作</span></span><br><span class="line">$.fn.<span class="property">functionName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//jQuery 应用扩展，在命名空间上加方法，直接 $. 操作</span></span><br><span class="line">jQuery.<span class="title function_">extend</span>(&#123;</span><br><span class="line">  <span class="attr">functionName</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web Developer</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JSONP Promise</title>
    <url>/2017/08/02/jsonp-promise/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>    <span class="variable">xmit</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DateTime</span>  2017-08-02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@copyright</span> [copyright]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@license</span>   [license]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>   [0.1.0]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>     &#123;<span class="type">[type]</span>&#125;    url     [jsonp link]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>     &#123;<span class="type">[type]</span>&#125;    params  [Object]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>     &#123;<span class="type">[type]</span>&#125;    timeout [number]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>    &#123;<span class="type">[type]</span>&#125;            [Promise]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@example</span></span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * jsonp(&#x27;https://www.ip.net/json/&#x27;, &#123;units:&#x27;si&#x27;,lang:&#x27;zh&#x27;&#125;, 5000)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">jsonp</span>(<span class="params">url, params, timeout</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> callbackname = <span class="string">&#x27;___JSONP_CALLBACK___&#x27;</span> + <span class="title class_">Date</span>.<span class="title function_">now</span>() + <span class="title class_">Math</span>.<span class="title function_">random</span>().<span class="title function_">toString</span>().<span class="title function_">substr</span>(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">let</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">    script.<span class="property">src</span> = url.<span class="title function_">indexOf</span>(<span class="string">&#x27;?&#x27;</span>) &gt; -<span class="number">1</span> ? url + <span class="string">&quot;&amp;&quot;</span> + <span class="title function_">serialize</span>(params) + <span class="string">&#x27;&amp;callback=&#x27;</span> + callbackname : url + <span class="string">&#x27;?&#x27;</span> + <span class="title function_">serialize</span>(params) + <span class="string">&#x27;&amp;callback=&#x27;</span> + callbackname</span><br><span class="line">    <span class="comment">// 加载成功</span></span><br><span class="line">    <span class="variable language_">window</span>[callbackname] = <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timerid)</span><br><span class="line">      <span class="title function_">removeScript</span>()</span><br><span class="line">      <span class="title function_">resolve</span>(data)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 加载失败</span></span><br><span class="line">    script.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Script loading error.&#x27;</span>))</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timerid)</span><br><span class="line">      <span class="title function_">removeScript</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 加载超时</span></span><br><span class="line">    <span class="keyword">let</span> timerid = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;JSONP request timed out.&#x27;</span>))</span><br><span class="line">      <span class="title function_">removeScript</span>()</span><br><span class="line">    &#125;, timeout)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">append</span>(script)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除script标签</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">removeScript</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">delete</span> <span class="variable language_">window</span>[callbackname]</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(script)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 序列化</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">serialize</span>(<span class="params">params</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> result = <span class="string">&quot;&quot;</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> params) &#123;</span><br><span class="line">        result += key + <span class="string">&quot;=&quot;</span> + params[key] + <span class="string">&#x27;&amp;&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result.<span class="title function_">slice</span>(<span class="number">0</span>, result.<span class="property">length</span> - <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Web Developer</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS 前端开发环境配置指南</title>
    <url>/2024/10/29/macos-dev-env-config/</url>
    <content><![CDATA[<h2 id="系统准备"><a href="#系统准备" class="headerlink" title="系统准备"></a>系统准备</h2><p>首先确保你的 macOS 系统已安装了 Xcode Command Line Tools：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="安装-Homebrew"><a href="#安装-Homebrew" class="headerlink" title="安装 Homebrew"></a>安装 Homebrew</h2><ol>
<li><p>安装 Homebrew：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>更新 Homebrew：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew update</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="配置-Zsh"><a href="#配置-Zsh" class="headerlink" title="配置 Zsh"></a>配置 Zsh</h2><h3 id="1-检查当前-Shell"><a href="#1-检查当前-Shell" class="headerlink" title="1. 检查当前 Shell"></a>1. 检查当前 Shell</h3><p>首先检查你当前使用的 Shell：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$SHELL</span></span><br></pre></td></tr></table></figure>

<h3 id="2-安装-Zsh"><a href="#2-安装-Zsh" class="headerlink" title="2. 安装 Zsh"></a>2. 安装 Zsh</h3><p>macOS 从 Catalina (10.15) 开始默认使用 Zsh。如果你使用的是较早版本，可以通过 Homebrew 安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install zsh</span><br></pre></td></tr></table></figure>

<h3 id="3-设置-Zsh-为默认-Shell"><a href="#3-设置-Zsh-为默认-Shell" class="headerlink" title="3. 设置 Zsh 为默认 Shell"></a>3. 设置 Zsh 为默认 Shell</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将 Zsh 添加到可用的 Shell 列表中</span></span><br><span class="line">sudo sh -c <span class="string">&#x27;echo $(which zsh) &gt;&gt; /etc/shells&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 Zsh 设置为默认 Shell</span></span><br><span class="line">chsh -s $(<span class="built_in">which</span> zsh)</span><br></pre></td></tr></table></figure>

<h3 id="4-重启终端"><a href="#4-重启终端" class="headerlink" title="4. 重启终端"></a>4. 重启终端</h3><p>设置完成后，关闭并重新打开终端，或者运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exec</span> zsh</span><br></pre></td></tr></table></figure>

<h3 id="5-验证-Zsh"><a href="#5-验证-Zsh" class="headerlink" title="5. 验证 Zsh"></a>5. 验证 Zsh</h3><p>确认是否成功切换到 Zsh：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$SHELL</span></span><br><span class="line"><span class="comment"># 应该显示: /bin/zsh 或 /usr/local/bin/zsh</span></span><br></pre></td></tr></table></figure>

<h3 id="6-安装-Oh-My-Zsh"><a href="#6-安装-Oh-My-Zsh" class="headerlink" title="6. 安装 Oh My Zsh"></a>6. 安装 Oh My Zsh</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="7-安装插件"><a href="#7-安装插件" class="headerlink" title="7. 安装插件"></a>7. 安装插件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 fast-syntax-highlighting</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zdharma-continuum/fast-syntax-highlighting <span class="variable">$&#123;ZSH_CUSTOM:-<span class="variable">$HOME</span>/.oh-my-zsh/custom&#125;</span>/plugins/fast-syntax-highlighting</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 zsh-autosuggestions</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 zsh-completions</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-completions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-completions</span><br></pre></td></tr></table></figure>

<h3 id="8-创建并配置-zshrc-文件："><a href="#8-创建并配置-zshrc-文件：" class="headerlink" title="8. 创建并配置 .zshrc 文件："></a>8. 创建并配置 .zshrc 文件：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 备份现有配置</span></span><br><span class="line"><span class="built_in">cp</span> ~/.zshrc ~/.zshrc.backup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建新的配置文件</span></span><br><span class="line">vi ~/.zshrc</span><br></pre></td></tr></table></figure>

<h3 id="9-将以下配置复制到-zshrc："><a href="#9-将以下配置复制到-zshrc：" class="headerlink" title="9. 将以下配置复制到 .zshrc："></a>9. 将以下配置复制到 .zshrc：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Path configuration</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$HOME</span>/bin:<span class="variable">$HOME</span>/.local/bin:/usr/local/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line">PROMPT=<span class="string">&#x27;%n@%m %1~ %# &#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># NVM configuration</span></span><br><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">&quot;<span class="variable">$HOME</span>/.nvm&quot;</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span>  <span class="comment"># This loads nvm</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/bash_completion&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/bash_completion&quot;</span>  <span class="comment"># This loads nvm bash_completion</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Oh My Zsh configuration</span></span><br><span class="line"><span class="built_in">export</span> ZSH=<span class="string">&quot;<span class="variable">$HOME</span>/.oh-my-zsh&quot;</span></span><br><span class="line">ZSH_THEME=<span class="string">&quot;robbyrussell&quot;</span>  <span class="comment"># 你可以选择其他主题</span></span><br><span class="line">DISABLE_UPDATE_PROMPT=<span class="string">&quot;true&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Performance options</span></span><br><span class="line">DISABLE_AUTO_UPDATE=<span class="string">&quot;true&quot;</span></span><br><span class="line">DISABLE_MAGIC_FUNCTIONS=<span class="string">&quot;true&quot;</span></span><br><span class="line">COMPLETION_WAITING_DOTS=<span class="string">&quot;true&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># History configuration</span></span><br><span class="line">HISTSIZE=50000</span><br><span class="line">SAVEHIST=50000</span><br><span class="line">HISTFILE=~/.zsh_history</span><br><span class="line"><span class="built_in">setopt</span> HIST_IGNORE_ALL_DUPS</span><br><span class="line"><span class="built_in">setopt</span> HIST_SAVE_NO_DUPS</span><br><span class="line"><span class="built_in">setopt</span> HIST_REDUCE_BLANKS</span><br><span class="line"><span class="built_in">setopt</span> HIST_VERIFY</span><br><span class="line"><span class="built_in">setopt</span> SHARE_HISTORY</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plugin configuration</span></span><br><span class="line">plugins=(</span><br><span class="line">    git</span><br><span class="line">    node</span><br><span class="line">    npm</span><br><span class="line">    vscode</span><br><span class="line">    colored-man-pages</span><br><span class="line">    brew</span><br><span class="line">    macos</span><br><span class="line">    fast-syntax-highlighting</span><br><span class="line">    zsh-autosuggestions</span><br><span class="line">    zsh-completions</span><br><span class="line">    docker</span><br><span class="line">    docker-compose</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Load Oh My Zsh</span></span><br><span class="line"><span class="built_in">source</span> <span class="variable">$ZSH</span>/oh-my-zsh.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load completions</span></span><br><span class="line"><span class="built_in">autoload</span> -Uz compinit &amp;&amp; compinit -i</span><br><span class="line"><span class="built_in">zstyle</span> <span class="string">&#x27;:completion:*&#x27;</span> menu <span class="keyword">select</span></span><br><span class="line"><span class="built_in">zstyle</span> <span class="string">&#x27;:completion:*&#x27;</span> matcher-list <span class="string">&#x27;m:&#123;a-zA-Z&#125;=&#123;A-Za-z&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Useful aliases</span></span><br><span class="line"><span class="built_in">alias</span> zshconfig=<span class="string">&quot;code ~/.zshrc&quot;</span></span><br><span class="line"><span class="built_in">alias</span> update=<span class="string">&#x27;brew update &amp;&amp; brew upgrade &amp;&amp; brew cleanup&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> <span class="built_in">ls</span>=<span class="string">&#x27;ls -G&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> ll=<span class="string">&#x27;ls -lah&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> c=<span class="string">&#x27;clear&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> ..=<span class="string">&#x27;cd ..&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> ...=<span class="string">&#x27;cd ../..&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> gst=<span class="string">&#x27;git status&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> gco=<span class="string">&#x27;git checkout&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> gcm=<span class="string">&#x27;git commit -m&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> gaa=<span class="string">&#x27;git add .&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> gl=<span class="string">&#x27;git log --graph --oneline&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Environment variables</span></span><br><span class="line"><span class="built_in">export</span> EDITOR=<span class="string">&#x27;code&#x27;</span></span><br><span class="line"><span class="built_in">export</span> LANG=en_US.UTF-8</span><br><span class="line"><span class="built_in">export</span> LC_ALL=en_US.UTF-8</span><br></pre></td></tr></table></figure>

<h2 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h2><ol>
<li><p>通过 Homebrew 安装 Git：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install git</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 Git：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;你的名字&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;你的邮箱&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置默认分支名</span></span><br><span class="line">git config --global init.defaultBranch main</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 Git 使用 VS Code 作为默认编辑器</span></span><br><span class="line">git config --global core.editor <span class="string">&quot;code --wait&quot;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="安装-Node-版本管理器"><a href="#安装-Node-版本管理器" class="headerlink" title="安装 Node 版本管理器"></a>安装 Node 版本管理器</h2><ol>
<li><p>安装 nvm：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 .zshrc 中添加 NVM 配置（在文件末尾添加）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># NVM configuration</span></span><br><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">&quot;<span class="variable">$HOME</span>/.nvm&quot;</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span>  <span class="comment"># This loads nvm</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/bash_completion&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/bash_completion&quot;</span>  <span class="comment"># This loads nvm bash_completion</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为常用的 node 命令添加别名</span></span><br><span class="line"><span class="built_in">alias</span> nr=<span class="string">&#x27;npm run&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> nrd=<span class="string">&#x27;npm run dev&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> nrs=<span class="string">&#x27;npm run start&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> nrb=<span class="string">&#x27;npm run build&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> nrt=<span class="string">&#x27;npm run test&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>安装最新的 LTS 版本的 Node.js：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm install --lts</span><br><span class="line">nvm use --lts</span><br><span class="line">nvm <span class="built_in">alias</span> default <span class="string">&#x27;lts/*&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="安装开发工具"><a href="#安装开发工具" class="headerlink" title="安装开发工具"></a>安装开发工具</h2><ol>
<li><p>安装常用开发工具：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 VS Code</span></span><br><span class="line">brew install --cask visual-studio-code</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Chrome</span></span><br><span class="line">brew install --cask google-chrome</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Docker</span></span><br><span class="line">brew install --cask docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装其他实用工具</span></span><br><span class="line">brew install tree  <span class="comment"># 目录树查看</span></span><br><span class="line">brew install wget  <span class="comment"># 下载工具</span></span><br><span class="line">brew install tldr  <span class="comment"># 命令帮助</span></span><br><span class="line">brew install jq    <span class="comment"># JSON 处理工具</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>安装常用的全局 npm 包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g pnpm</span><br><span class="line">npm install -g yarn</span><br><span class="line">npm install -g typescript</span><br><span class="line">npm install -g @vue/cli</span><br><span class="line">npm install -g serve</span><br><span class="line">npm install -g http-server</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="可选配置"><a href="#可选配置" class="headerlink" title="可选配置"></a>可选配置</h2><ol>
<li><p>安装和配置 SSH key：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t ed25519 -C <span class="string">&quot;你的邮箱&quot;</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(ssh-agent -s)</span>&quot;</span></span><br><span class="line">ssh-add ~/.ssh/id_ed25519</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装字体：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 Fira Code</span></span><br><span class="line">brew tap homebrew/cask-fonts</span><br><span class="line">brew install --cask font-fira-code</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装其他实用工具：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># iTerm2 终端</span></span><br><span class="line">brew install --cask iterm2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实用工具</span></span><br><span class="line">brew install --cask rectangle  <span class="comment"># 窗口管理</span></span><br><span class="line">brew install --cask alfred    <span class="comment"># 效率工具</span></span><br><span class="line">brew install --cask postman  <span class="comment"># API 测试工具</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h2><p>完成安装后，运行以下命令检查是否安装成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查 Git 版本</span></span><br><span class="line">git --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 Node 版本</span></span><br><span class="line">node --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 npm 版本</span></span><br><span class="line">npm --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 Homebrew 版本</span></span><br><span class="line">brew --version</span><br></pre></td></tr></table></figure>

<h2 id="日常维护"><a href="#日常维护" class="headerlink" title="日常维护"></a>日常维护</h2><p>定期运行以下命令保持系统更新：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新 Homebrew</span></span><br><span class="line">brew update &amp;&amp; brew upgrade &amp;&amp; brew cleanup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新 npm 包</span></span><br><span class="line">npm update -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新 Oh My Zsh</span></span><br><span class="line">omz update</span><br></pre></td></tr></table></figure>

<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li>如果安装过程中遇到权限问题，可能需要使用 sudo</li>
<li>某些系统可能需要重启电脑才能完全生效</li>
<li>如果想要恢复到 bash，可以使用：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chsh -s /bin/bash</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="故障排除"><a href="#故障排除" class="headerlink" title="故障排除"></a>故障排除</h2><p>如果遇到以下问题：</p>
<ol>
<li><p><strong>提示 zsh 不在 &#x2F;etc&#x2F;shells 中</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sh -c <span class="string">&#x27;echo $(which zsh) &gt;&gt; /etc/shells&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>权限问题</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 确保 Zsh 目录权限正确</span></span><br><span class="line">sudo <span class="built_in">chown</span> -R $(<span class="built_in">whoami</span>) ~/.oh-my-zsh</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>插件安装失败</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 确保 custom/plugins 目录存在</span></span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Web Developer</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>开发环境</tag>
        <tag>前端开发</tag>
      </tags>
  </entry>
  <entry>
    <title>node 版本管理工具 nvm</title>
    <url>/2018/03/05/node-version-control-nvm/</url>
    <content><![CDATA[<h2 id="nvm-安装"><a href="#nvm-安装" class="headerlink" title="nvm 安装"></a>nvm 安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash</span><br></pre></td></tr></table></figure>

<h2 id="安装-node"><a href="#安装-node" class="headerlink" title="安装 node"></a>安装 node</h2><h3 id="安装指定版本的-node"><a href="#安装指定版本的-node" class="headerlink" title="安装指定版本的 node"></a>安装指定版本的 node</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm install v5.5.0</span><br></pre></td></tr></table></figure>

<h3 id="安装一个系列中最新的版本"><a href="#安装一个系列中最新的版本" class="headerlink" title="安装一个系列中最新的版本"></a>安装一个系列中最新的版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm install 6</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="列出远程服务器上所有的可用版本"><a href="#列出远程服务器上所有的可用版本" class="headerlink" title="列出远程服务器上所有的可用版本"></a>列出远程服务器上所有的可用版本</h3><p>mac</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm ls-remote</span><br></pre></td></tr></table></figure>

<p>Windows</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm <span class="built_in">ls</span> available</span><br></pre></td></tr></table></figure>

<h3 id="版本切换"><a href="#版本切换" class="headerlink" title="版本切换"></a>版本切换</h3><h3 id="切换指定版本"><a href="#切换指定版本" class="headerlink" title="切换指定版本"></a>切换指定版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm use 4.2.2</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm use system</span><br></pre></td></tr></table></figure>

<h3 id="切换到指定版本的最新版"><a href="#切换到指定版本的最新版" class="headerlink" title="切换到指定版本的最新版"></a>切换到指定版本的最新版</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm use 4.2</span><br></pre></td></tr></table></figure>

<h3 id="切换到最新版"><a href="#切换到最新版" class="headerlink" title="切换到最新版"></a>切换到最新版</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm use node</span><br></pre></td></tr></table></figure>

<h3 id="列出已安装实例"><a href="#列出已安装实例" class="headerlink" title="列出已安装实例"></a>列出已安装实例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm <span class="built_in">ls</span></span><br></pre></td></tr></table></figure>

<h3 id="运行特定版本的-Node"><a href="#运行特定版本的-Node" class="headerlink" title="运行特定版本的 Node"></a>运行特定版本的 Node</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm run 4.2.2 --version</span><br></pre></td></tr></table></figure>

<h3 id="确认某个版本Node的路径"><a href="#确认某个版本Node的路径" class="headerlink" title="确认某个版本Node的路径"></a>确认某个版本Node的路径</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm <span class="built_in">which</span> 4.2.2</span><br></pre></td></tr></table></figure>

<h3 id="设定默认的node版本-nvm-alias-default"><a href="#设定默认的node版本-nvm-alias-default" class="headerlink" title="设定默认的node版本 nvm alias default &lt;版本号&gt;"></a>设定默认的node版本 nvm alias default &lt;版本号&gt;</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm <span class="built_in">alias</span> default v6.6.0</span><br></pre></td></tr></table></figure>

<h3 id="卸载-nvm-uninstall"><a href="#卸载-nvm-uninstall" class="headerlink" title="卸载 nvm uninstall &lt;node版本号&gt;"></a>卸载 nvm uninstall &lt;node版本号&gt;</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nvm uninstall v6.6.0</span><br><span class="line">file is not writable or self-owned: <span class="variable">$NVM_DIR</span>/versions/node/v6.6.0/bin/cnpm</span><br><span class="line">Cannot uninstall, incorrect permissions on installation folder.</span><br><span class="line">This is usually caused by running `npm install -g` as root. Run the following commands as root to fix the permissions and <span class="keyword">then</span> try again.</span><br><span class="line"></span><br><span class="line">  <span class="built_in">chown</span> -R username <span class="string">&quot;<span class="variable">$NVM_DIR</span>/versions/node/v6.6.0&quot;</span></span><br><span class="line">  <span class="built_in">chmod</span> -R u+w <span class="string">&quot;<span class="variable">$NVM_DIR</span>/versions/node/v6.6.0&quot;</span></span><br></pre></td></tr></table></figure>

<p>第1行：把指定目录的所有者改为 username 所有，这里 username 是用户名，可以改成  $(whoami) 避免输入错误。所以先输入以下命令（使用sudo）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chown</span> -R $(<span class="built_in">whoami</span>) <span class="string">&quot;<span class="variable">$NVM_DIR</span>/versions/node/v6.6.0&quot;</span></span><br></pre></td></tr></table></figure>

<p>第2行：u+w中u表示所有者，+表示增加权限，w表示可写入。整句表示对目录所有者增加写入权限。所以再输入（使用sudo）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> -R u+w <span class="string">&quot;<span class="variable">$NVM_DIR</span>/versions/node/v6.6.0&quot;</span></span><br></pre></td></tr></table></figure>

<p>当用户有了权限之后，就可以删除指定版本的 node</p>
]]></content>
      <categories>
        <category>Web Developer</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>OS X 下安装 aria2</title>
    <url>/2016/01/06/osx-install-aria2/</url>
    <content><![CDATA[<h3 id="brew-安装-aria2"><a href="#brew-安装-aria2" class="headerlink" title="brew 安装 aria2"></a>brew 安装 aria2</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">brew install aria2</span><br></pre></td></tr></table></figure>

<h3 id="建立配置文件（非必要）"><a href="#建立配置文件（非必要）" class="headerlink" title="建立配置文件（非必要）"></a>建立配置文件（非必要）</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ~/.aria2</span><br><span class="line"><span class="built_in">cd</span> .aria2</span><br><span class="line"><span class="built_in">touch</span> aria2.conf</span><br></pre></td></tr></table></figure>

<h3 id="在-aria2-conf-写入配置"><a href="#在-aria2-conf-写入配置" class="headerlink" title="在 aria2.conf 写入配置"></a>在 aria2.conf 写入配置</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim ~/.aria2/aria2.conf</span><br></pre></td></tr></table></figure>
<span id="more"></span>


<p>这里的配置文件可以参考[<a class="link"   href="http://aria2c.com/usage.html][1]" >http://aria2c.com/usage.html][1]<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用户名</span></span><br><span class="line"><span class="comment">#rpc-user=user</span></span><br><span class="line"><span class="comment">#密码</span></span><br><span class="line"><span class="comment">#rpc-passwd=passwd</span></span><br><span class="line"><span class="comment">#上面的认证方式不建议使用,建议使用下面的token方式</span></span><br><span class="line"><span class="comment">#设置加密的密钥</span></span><br><span class="line"><span class="comment">#rpc-secret=token</span></span><br><span class="line"><span class="comment">#允许rpc</span></span><br><span class="line">enable-rpc=<span class="literal">true</span></span><br><span class="line"><span class="comment">#允许所有来源, web界面跨域权限需要</span></span><br><span class="line">rpc-allow-origin-all=<span class="literal">true</span></span><br><span class="line"><span class="comment">#允许外部访问，false的话只监听本地端口</span></span><br><span class="line">rpc-listen-all=<span class="literal">true</span></span><br><span class="line"><span class="comment">#RPC端口, 仅当默认端口被占用时修改</span></span><br><span class="line"><span class="comment">#rpc-listen-port=6800</span></span><br><span class="line"><span class="comment">#最大同时下载数(任务数), 路由建议值: 3</span></span><br><span class="line">max-concurrent-downloads=5</span><br><span class="line"><span class="comment">#断点续传</span></span><br><span class="line"><span class="built_in">continue</span>=<span class="literal">true</span></span><br><span class="line"><span class="comment">#同服务器连接数</span></span><br><span class="line">max-connection-per-server=5</span><br><span class="line"><span class="comment">#最小文件分片大小, 下载线程数上限取决于能分出多少片, 对于小文件重要</span></span><br><span class="line">min-split-size=10M</span><br><span class="line"><span class="comment">#单文件最大线程数, 路由建议值: 5</span></span><br><span class="line"><span class="built_in">split</span>=10</span><br><span class="line"><span class="comment">#下载速度限制</span></span><br><span class="line">max-overall-download-limit=0</span><br><span class="line"><span class="comment">#单文件速度限制</span></span><br><span class="line">max-download-limit=0</span><br><span class="line"><span class="comment">#上传速度限制</span></span><br><span class="line">max-overall-upload-limit=0</span><br><span class="line"><span class="comment">#单文件速度限制</span></span><br><span class="line">max-upload-limit=0</span><br><span class="line"><span class="comment">#断开速度过慢的连接</span></span><br><span class="line"><span class="comment">#lowest-speed-limit=0</span></span><br><span class="line"><span class="comment">#验证用，需要1.16.1之后的release版本</span></span><br><span class="line"><span class="comment">#referer=*</span></span><br><span class="line"><span class="comment">#文件保存路径, 默认为当前启动位置</span></span><br><span class="line"><span class="built_in">dir</span>=/Users/请填写你的用户名/Downloads</span><br><span class="line"><span class="comment">#文件缓存, 使用内置的文件缓存, 如果你不相信Linux内核文件缓存和磁盘内置缓存时使用, 需要1.16及以上版本</span></span><br><span class="line"><span class="comment">#disk-cache=0</span></span><br><span class="line"><span class="comment">#另一种Linux文件缓存方式, 使用前确保您使用的内核支持此选项, 需要1.15及以上版本(?)</span></span><br><span class="line"><span class="comment">#enable-mmap=true</span></span><br><span class="line"><span class="comment">#文件预分配, 能有效降低文件碎片, 提高磁盘性能. 缺点是预分配时间较长</span></span><br><span class="line"><span class="comment">#所需时间 none &lt; falloc ? trunc « prealloc, falloc和trunc需要文件系统和内核支持</span></span><br><span class="line">file-allocation=prealloc</span><br></pre></td></tr></table></figure>

<h3 id="启动-RPC-模式"><a href="#启动-RPC-模式" class="headerlink" title="启动 RPC 模式"></a>启动 RPC 模式</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">aria2c --conf-path=<span class="string">&quot;/Users/用户名/.aria2/aria2.conf&quot;</span> -D</span><br></pre></td></tr></table></figure>

<h3 id="使用-YAAW-管理下载"><a href="#使用-YAAW-管理下载" class="headerlink" title="使用 YAAW 管理下载"></a>使用 YAAW 管理下载</h3><p>这里我是使用在线版YAAW来管理aria2下载的，直接打开 [<a class="link"   href="http://aria2c.com/][2]%EF%BC%8C%E5%9C%A8%E8%AE%BE%E7%BD%AE%E9%87%8C%E5%A1%AB%E5%85%A5" >http://aria2c.com/][2]，在设置里填入<i class="fas fa-external-link-alt"></i></a> JSON-RPC Path 地址就可以开始下载了（JSON-RPC Path 默认为: <a class="link"   href="http://localhost:6800/jsonrpc%EF%BC%89" >http://localhost:6800/jsonrpc）<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="关闭-aria2"><a href="#关闭-aria2" class="headerlink" title="关闭 aria2"></a>关闭 aria2</h3><p>kill aria2 之后按 Tab 键，aria2 会自动变成进程号，回车即可杀掉它</p>
<p>[1]:	<a class="link"   href="http://aria2c.com/usage.html" >http://aria2c.com/usage.html<i class="fas fa-external-link-alt"></i></a><br>[2]:	<a class="link"   href="http://aria2c.com/" >http://aria2c.com/<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>OS X</category>
      </categories>
      <tags>
        <tag>OS X</tag>
      </tags>
  </entry>
  <entry>
    <title>Padavan 编译教程</title>
    <url>/2016/10/17/padavan-compilation-tutorial/</url>
    <content><![CDATA[<h2 id="配置编译环境"><a href="#配置编译环境" class="headerlink" title="配置编译环境"></a>配置编译环境</h2><h3 id="安装虚拟机"><a href="#安装虚拟机" class="headerlink" title="安装虚拟机"></a>安装虚拟机</h3><h3 id="安装Ubuntu-16-04LTS"><a href="#安装Ubuntu-16-04LTS" class="headerlink" title="安装Ubuntu 16.04LTS"></a>安装Ubuntu 16.04LTS</h3><h3 id="安装-git"><a href="#安装-git" class="headerlink" title="安装 git"></a>安装 git</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update </span><br><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure>

<h3 id="转到-opt目录，并且用命令克隆-Padavan-仓库"><a href="#转到-opt目录，并且用命令克隆-Padavan-仓库" class="headerlink" title="转到/opt目录，并且用命令克隆 Padavan 仓库"></a>转到<code>/opt</code>目录，并且用命令克隆 Padavan 仓库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">sudo git <span class="built_in">clone</span> https://bitbucket.org/padavan/rt-n56u.git</span><br></pre></td></tr></table></figure>

<h3 id="安装编译固件所需要的工具"><a href="#安装编译固件所需要的工具" class="headerlink" title="安装编译固件所需要的工具"></a>安装编译固件所需要的工具</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install autoconf automake bison build-essential flex gawk gettext gperf libtool pkg-config zlib1g-dev libgmp3-dev libmpc-dev libmpfr-dev texinfo python-docutils mc</span><br></pre></td></tr></table></figure>

<h3 id="编译一个交叉编译的工具链"><a href="#编译一个交叉编译的工具链" class="headerlink" title="编译一个交叉编译的工具链"></a>编译一个交叉编译的工具链</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/rt-n56u/toolchain-mipsel</span><br><span class="line">sudo ./clean_sources</span><br><span class="line">sudo ./build_toolchain</span><br></pre></td></tr></table></figure>

<h3 id="编译3-0内核的固件"><a href="#编译3-0内核的固件" class="headerlink" title="编译3.0内核的固件"></a>编译3.0内核的固件</h3><p>如果你需要编译3.0内核的固件就需要执行下面的步骤，默认支持3.4内核</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/rt-n56u/toolchain-mipsel</span><br><span class="line">sudo ./clean_sources</span><br><span class="line">sudo ./build_toolchain_3.0.x</span><br></pre></td></tr></table></figure>

<p>编译好后的工具链会放在<code>/opt/rt-n56u/toolchain-mipsel/toolchain-3.0.x</code></p>
<p>以后在更新或者升级工具链的情况下才需要执行以上步骤。</p>
<span id="more"></span>



<h2 id="机型适配（newifi-mini）"><a href="#机型适配（newifi-mini）" class="headerlink" title="机型适配（newifi mini）"></a>机型适配（newifi mini）</h2><h3 id="进行入固件源码目录"><a href="#进行入固件源码目录" class="headerlink" title="进行入固件源码目录"></a>进行入固件源码目录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/rt-n56u/trunk</span><br></pre></td></tr></table></figure>

<h3 id="生成配置文件"><a href="#生成配置文件" class="headerlink" title="生成配置文件"></a>生成配置文件</h3><p>删除默认的配置文件 <code>opt/rt-n56u/trunk </code>下的<code>.config</code>文件，默认是隐藏的，可以使用<code>Ctrl+H</code>显示与隐藏配置文件，或者用以下命令进行删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">rm</span> -f opt/rt-n56u/trunk/.config </span><br></pre></td></tr></table></figure>

<p>从<code>opt/rt-n56u/trunk/configs/templates</code>里拷贝出 <code>ac54u_base.config </code>到 <code>opt/rt-n56u/trunk</code>下并重命名成<code>.config</code>，或者用以下命令进行操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> opt/rt-n56u/trunk/configs/templates/ac54_base.config /opt/rt-n56u/trunk/.config</span><br></pre></td></tr></table></figure>

<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>由于修改后默认的.config 配置文件里文档写的很详细，就不多解释，根据自己需要开启与关闭需要与不需要的功能，<code>#</code>这个符号默认是注释代码，也就是关闭某个功能，反之去掉就是开启（可以把文档内容拷出来到翻译里翻译一遍，可以很清楚的看到每个功能是干什么用的）</p>
<h3 id="适配灯与复位键"><a href="#适配灯与复位键" class="headerlink" title="适配灯与复位键"></a>适配灯与复位键</h3><p>编辑 <code>/opt/rt-56u/trunk/configs/boards/RT-AC54U/board.h</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/* ASUS RT-AC54U */</span><br><span class="line"></span><br><span class="line"><span class="comment">#define BOARD_PID		&quot;RT-AC54U&quot;</span></span><br><span class="line"><span class="comment">#define BOARD_NAME		&quot;RT-AC54U&quot;</span></span><br><span class="line"><span class="comment">#define BOARD_DESC		&quot;ASUS RT-AC54U Wireless Router&quot;</span></span><br><span class="line"><span class="comment">#define BOARD_VENDOR_NAME	&quot;ASUSTek Computer Inc.&quot;</span></span><br><span class="line"><span class="comment">#define BOARD_VENDOR_URL	&quot;http://www.asus.com/&quot;</span></span><br><span class="line"><span class="comment">#define BOARD_MODEL_URL		&quot;http://www.asus.com/Networking/RTAC54U/&quot;</span></span><br><span class="line"><span class="comment">#define BOARD_BOOT_TIME		25</span></span><br><span class="line"><span class="comment">#define BOARD_FLASH_TIME	120</span></span><br><span class="line"><span class="comment">#undef BOARD_GPIO_BTN_RESET</span></span><br><span class="line"><span class="comment">#define BOARD_GPIO_BTN_WPS	11</span></span><br><span class="line"><span class="comment">#undef  BOARD_GPIO_BTN_WLTOG</span></span><br><span class="line"><span class="comment">#undef BOARD_GPIO_LED_ALL</span></span><br><span class="line"><span class="comment">#define BOARD_GPIO_LED_WIFI	72</span></span><br><span class="line"><span class="comment">#undef  BOARD_GPIO_LED_SW2G</span></span><br><span class="line"><span class="comment">#define BOARD_GPIO_LED_SW5G	50</span></span><br><span class="line"><span class="comment">#define BOARD_GPIO_LED_POWER	9</span></span><br><span class="line"><span class="comment">#define BOARD_GPIO_LED_LAN	55</span></span><br><span class="line"><span class="comment">#define BOARD_GPIO_LED_WAN	51</span></span><br><span class="line"><span class="comment">#define BOARD_GPIO_LED_USB	52</span></span><br><span class="line"><span class="comment">#undef  BOARD_GPIO_LED_ROUTER</span></span><br><span class="line"><span class="comment">#undef  BOARD_GPIO_PWR_USB</span></span><br><span class="line"><span class="comment">#define BOARD_HAS_5G_11AC	1</span></span><br><span class="line"><span class="comment">#define BOARD_NUM_ANT_5G_TX	2</span></span><br><span class="line"><span class="comment">#define BOARD_NUM_ANT_5G_RX	2</span></span><br><span class="line"><span class="comment">#define BOARD_NUM_ANT_2G_TX	2</span></span><br><span class="line"><span class="comment">#define BOARD_NUM_ANT_2G_RX	2</span></span><br><span class="line"><span class="comment">#define BOARD_NUM_ETH_LEDS	1</span></span><br><span class="line"><span class="comment">#define BOARD_HAS_EPHY_L1000	0</span></span><br><span class="line"><span class="comment">#define BOARD_HAS_EPHY_W1000	0</span></span><br><span class="line"></span><br><span class="line">//上面是newifi mini的，由于每个机型不同，仅供参考</span><br></pre></td></tr></table></figure>

<h3 id="调用原厂无线参数"><a href="#调用原厂无线参数" class="headerlink" title="调用原厂无线参数"></a>调用原厂无线参数</h3><p>编辑 <code>/opt/rt-56u/trunk/configs/boards/RT-AC54U/kernel-3.4.x.config</code>查找修改成以下代码，并删除目录下<code>SingleSKU</code>开头的文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CONFIG_RT_SINGLE_SKU=n</span><br><span class="line">CONFIG_RT2860V2_AP_GREENAP=y</span><br><span class="line">CONFIG_INTERNAL_PA_INTERNAL_LNA=n</span><br><span class="line">CONFIG_INTERNAL_PA_EXTERNAL_LNA=n</span><br><span class="line">CONFIG_EXTERNAL_PA_EXTERNAL_LNA=y</span><br><span class="line">CONFIG_MT76X2_AP_GREENAP=y</span><br><span class="line">CONFIG_MT76X2_AP_INTERNAL_PA_INTERNAL_LNA=n</span><br><span class="line">CONFIG_MT76X2_AP_INTERNAL_PA_EXTERNAL_LNA=n</span><br><span class="line">CONFIG_MT76X2_AP_EXTERNAL_PA_EXTERNAL_LNA=y</span><br><span class="line">CONFIG_RALINK_UART_BRATE=57600</span><br></pre></td></tr></table></figure>



<h3 id="适配WAN口与LAN口"><a href="#适配WAN口与LAN口" class="headerlink" title="适配WAN口与LAN口"></a>适配WAN口与LAN口</h3><p>编辑 <code>/opt/rt-56u/trunk/configs/boards/RT-AC54U/kernel-3.4.x.config</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CONFIG_RAETH_ESW_PORT_WAN=4</span><br><span class="line">CONFIG_RAETH_ESW_PORT_LAN1=1</span><br><span class="line">CONFIG_RAETH_ESW_PORT_LAN2=0</span><br><span class="line">CONFIG_RAETH_ESW_PORT_LAN3=3</span><br><span class="line">CONFIG_RAETH_ESW_PORT_LAN4=2</span><br><span class="line"></span><br><span class="line">//上面是newifi mini的，由于每个机型不同，仅供参考</span><br></pre></td></tr></table></figure>

<h3 id="开启外置PA-LAN支持"><a href="#开启外置PA-LAN支持" class="headerlink" title="开启外置PA&amp;LAN支持"></a>开启外置PA&amp;LAN支持</h3><p>在 <code>/opt/rt-56u/trunk/configs/boards/RT-AC54U/kernel-3.4.x.config</code>里删除<code># CONFIG_EXTERNAL_PA_EXTERNAL_LNA is not set</code> 这一行代码，并加入下面的代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CONFIG_EXTERNAL_PA_EXTERNAL_LNA=y</span><br></pre></td></tr></table></figure>

<h3 id="扩展内存"><a href="#扩展内存" class="headerlink" title="扩展内存"></a>扩展内存</h3><p>编辑<code>/opt/rt-56u/trunk/configs/boards/RT-AC54U/kernel-3.4.x.config</code>配置文件，以AC-54U为例，默认是64M，所以只需要将以下代码进行如下修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 没修改前是64M内存</span><br><span class="line">CONFIG_RT2880_DRAM_16M is not <span class="built_in">set</span></span><br><span class="line">CONFIG_RT2880_DRAM_32M is not <span class="built_in">set</span></span><br><span class="line">CONFIG_RT2880_DRAM_64M=y</span><br><span class="line">CONFIG_RT2880_DRAM_128M is not <span class="built_in">set</span></span><br><span class="line">CONFIG_RT2880_DRAM_256M is not <span class="built_in">set</span></span><br><span class="line">CONFIG_RALINK_RAM_SIZE=64</span><br><span class="line"></span><br><span class="line">// 修改成128M</span><br><span class="line">CONFIG_RT2880_DRAM_16M is not <span class="built_in">set</span></span><br><span class="line">CONFIG_RT2880_DRAM_32M is not <span class="built_in">set</span></span><br><span class="line">CONFIG_RT2880_DRAM_64M is not <span class="built_in">set</span></span><br><span class="line">CONFIG_RT2880_DRAM_128M=y</span><br><span class="line">CONFIG_RT2880_DRAM_256M is not <span class="built_in">set</span></span><br><span class="line">CONFIG_RALINK_RAM_SIZE=128</span><br></pre></td></tr></table></figure>

<h3 id="设置时区"><a href="#设置时区" class="headerlink" title="设置时区"></a>设置时区</h3><p>编辑<code>/opt/rt-56u/trunk/user/shared/defaults.h</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#define DEF_TIMEZONE		&quot;CST-8&quot;</span></span><br><span class="line"><span class="comment">#define DEF_NTP_SERVER0		&quot;ntp1.aliyun.com&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="关闭-telnet-开启-ssh"><a href="#关闭-telnet-开启-ssh" class="headerlink" title="关闭 telnet 开启 ssh"></a>关闭 telnet 开启 ssh</h3><p>编辑<code>/opt/rt-56u/trunk/user/shared/defaults.c</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;telnetd&quot;</span>,<span class="string">&quot;0&quot;</span>&#125;.</span><br><span class="line">&#123;<span class="string">&quot;sshd_enable&quot;</span>,<span class="string">&quot;1&quot;</span>&#125;</span><br></pre></td></tr></table></figure>



<h2 id="汉化"><a href="#汉化" class="headerlink" title="汉化"></a>汉化</h2><p>编辑<code>trunk/user/www/dict/EN.header</code>文件，找到<code>LANG_EN=English</code>修改成以下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LANG_EN=简体中文</span><br></pre></td></tr></table></figure>

<p>编辑<code>trunk/user/www/dict/EN.footer</code>文件，把里面内容翻译成中文（也可以从已经汉化的固件里提取<code>/www/EN.dict</code>文件，删除以下的内容，然后保存并重新命名成<code>EN.footer</code>；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Language <span class="built_in">type</span>]</span><br><span class="line">LANG_EN=简体中文</span><br><span class="line">LANG_RU=English</span><br></pre></td></tr></table></figure>

<p>编辑<code>trunk/user/www/Makefile</code>文件，找到<code>echo &quot;LANG_RU=Pусский&quot; &gt;&gt; $(ROMFS_DIR)/www/EN.header</code>修改成以下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;LANG_RU=English&quot;</span> &gt;&gt; $(ROMFS_DIR)/www/EN.header</span><br></pre></td></tr></table></figure>

<p>编辑<code>trunk/user/www/dict/RU.dict</code>文件，找到<code>LANG_EN=English</code>修改成以下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LANG_EN=简体中文</span><br></pre></td></tr></table></figure>





<h2 id="生成固件"><a href="#生成固件" class="headerlink" title="生成固件"></a>生成固件</h2><h3 id="清除源码树"><a href="#清除源码树" class="headerlink" title="清除源码树"></a>清除源码树</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ./clear_tree</span><br></pre></td></tr></table></figure>

<h3 id="开始编译生成固件"><a href="#开始编译生成固件" class="headerlink" title="开始编译生成固件"></a>开始编译生成固件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ./build_firmware</span><br></pre></td></tr></table></figure>

<p>编译完成后生成的固件在<code>/opt/rt-56u/trunk/images</code>里面</p>
<h2 id="更新源码"><a href="#更新源码" class="headerlink" title="更新源码"></a>更新源码</h2><p>转到<code>/opt</code>目录，克隆最新源码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">sudo git pull</span><br></pre></td></tr></table></figure>

<p>如果你对本地存仓库进行了更改，那么在更新源码的时候，你必须运行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo git stash</span><br><span class="line">sudo git pull</span><br></pre></td></tr></table></figure>

<p>如果更改了工具链，则必须重新构建它</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/rt-n56u/toolchain-mipsel</span><br><span class="line">sudo ./clean_sources  </span><br><span class="line">sudo ./clean_toolchain  </span><br><span class="line">sudo ./build_toolchain</span><br></pre></td></tr></table></figure>

<p>以上的修改建议使用手工进行修改，如果直接使用文件进行覆盖的话很容易出错。而且一但编译出错的话需要花很多时间进行调整，所以还是自己一步步慢慢改吧。</p>
<p>更多请参考<a class="link"   href="https://bitbucket.org/padavan/rt-n56u/wiki/EN/HowToMakeFirmware" >Padavan官网编译教程<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>router</category>
      </categories>
      <tags>
        <tag>padavan</tag>
      </tags>
  </entry>
  <entry>
    <title>记 React 中一次复用与封装</title>
    <url>/2019/04/19/react-hoc/</url>
    <content><![CDATA[<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>最近发现自己一直在写很多重复性的代码，比例公司的某个项目的搜索栏有很多的下拉选择器,而我的做法是不停的初始化store、配置api、引入select组件、配置select组件，这还只是其中一个下拉选择器，如果有多个就觉得这么写是不是很傻，所以最近一直在考虑如果优化。</p>
<p>当重复性的工作过多的时候，就应该考虑自己的代码写的是不是有问题。</p>
<blockquote>
<p>封装：把客观事物封装成抽象的类，隐藏属性和方法的实现细节，仅对外公开接口。</p>
</blockquote>
<p>初步想法是减少重复性的工作，而目前我能想到的解法方法有几个：</p>
<ul>
<li>用 class 抽象成一个公共的组件（这种最简单也最实用）</li>
<li>用 HOC（高阶组件）抽象成一个公共的组件</li>
<li>用 Render Props （函数子组件 FaCC）抽象成一个公共的组件</li>
</ul>
<span id="more"></span>

<h3 id="用高阶组件实现"><a href="#用高阶组件实现" class="headerlink" title="用高阶组件实现"></a>用高阶组件实现</h3><p>编写 componentSelect 组件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Select</span> &#125; <span class="keyword">from</span> <span class="string">&quot;antd&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">WithClassName</span> = <span class="title class_">WrappedComponent</span> =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">class</span> <span class="title class_">HOC</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">      <span class="variable language_">super</span>(props);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">        <span class="attr">list</span>: []</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">getData</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> &#123; list &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">      <span class="keyword">let</span> &#123; valueName, labelName &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...this.props</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;list.map(it =&gt; (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">WrappedComponent.Option</span> <span class="attr">value</span>=<span class="string">&#123;it[valueName]&#125;</span> <span class="attr">key</span>=<span class="string">&#123;it[valueName]&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              &#123;it[labelName]&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">WrappedComponent.Option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          ))&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">WrappedComponent</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> &#123; params = &#123;&#125;, api = <span class="string">&quot;&quot;</span> &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">      axios</span><br><span class="line">        .<span class="title function_">get</span>(api, &#123;</span><br><span class="line">          ...params</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function"><span class="params">it</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (it.<span class="property">resultObject</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">              <span class="attr">list</span>: it.<span class="property">resultObject</span></span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">WithClassName</span>(<span class="title class_">Select</span>);</span><br></pre></td></tr></table></figure>
<p>使用 componentSelect 组件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ComponentSelect</span> <span class="keyword">from</span> <span class="string">&#x27;componentSelect&#x27;</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="title class_">ComponentSelect</span></span><br><span class="line">  api=<span class="string">&quot;/api/getSelectData&quot;</span></span><br><span class="line">  placeholder=<span class="string">&quot;请选择下拉&quot;</span></span><br><span class="line">  allowClear=&#123;<span class="literal">true</span>&#125;</span><br><span class="line">  valueName=&#123;<span class="string">&#x27;valueCode&#x27;</span>&#125;</span><br><span class="line">  labelName=&#123;<span class="string">&#x27;valueName&#x27;</span>&#125;</span><br><span class="line">  params=&#123;&#123; ...params &#125;&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>

<h3 id="用-Render-Props-（函数子组件-FaCC）实现"><a href="#用-Render-Props-（函数子组件-FaCC）实现" class="headerlink" title="用 Render Props （函数子组件 FaCC）实现"></a>用 Render Props （函数子组件 FaCC）实现</h3><p>编写 SelectContext 组件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SelectContext</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">list</span>: []</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getData</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; list &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">    <span class="keyword">const</span> &#123; children &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">children</span>(list);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; params = &#123;&#125;, api = <span class="string">&quot;&quot;</span> &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">    axios.<span class="property">http</span></span><br><span class="line">      .<span class="title function_">post</span>(api, &#123;</span><br><span class="line">        ...params</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function"><span class="params">it</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (it.<span class="property">resultObject</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">            <span class="attr">list</span>: it.<span class="property">resultObject</span></span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">SelectContext</span>;</span><br></pre></td></tr></table></figure>
<p>使用 SelectContext 组件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Select</span> &#125; <span class="keyword">from</span> <span class="string">&quot;antd&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">SelectContext</span> <span class="keyword">from</span> <span class="string">&#x27;componentSelect&#x27;</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="title class_">SelectContext</span></span><br><span class="line">  api=<span class="string">&quot;/api/getSelectData&quot;</span></span><br><span class="line">  params=&#123;&#123;...params&#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">  &#123;<span class="function"><span class="params">list</span> =&gt;</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Select</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择&quot;</span> <span class="attr">allowClear</span>=<span class="string">&#123;true&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;list.map(it =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Select.Option</span> <span class="attr">value</span>=<span class="string">&#123;it.value&#125;</span> <span class="attr">key</span>=<span class="string">&#123;it.value&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;it.name&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Select.Option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Select</span>&gt;</span></span></span><br><span class="line">  )&#125;</span><br><span class="line">&lt;/<span class="title class_">SelectContext</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>在 ant.design 表单中直接使用 Render Props 会出现无法取到值的情况，需要改成如下写法</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">SelectContext</span> api=<span class="string">&quot;/api/getSelectData&quot;</span> params=&#123;&#123; ...params &#125;&#125;&gt;</span><br><span class="line">  &#123;<span class="function"><span class="params">list</span> =&gt;</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;getFieldDecorator(&quot;value&quot;, &#123;&#125;)(</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Select</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择&quot;</span> <span class="attr">allowClear</span>=<span class="string">&#123;true&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;list.map(it =&gt; (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Select.Option</span> <span class="attr">value</span>=<span class="string">&#123;it.value&#125;</span> <span class="attr">key</span>=<span class="string">&#123;it.value&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              &#123;it.name&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Select.Option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          ))&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      )&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&lt;/<span class="title class_">SelectContext</span>&gt;;</span><br></pre></td></tr></table></figure>

<p>目前暂时不知道为何会这样，我猜应该跟 ant.design 的写法有关系</p>
]]></content>
      <categories>
        <category>Web Developer</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>React Router v4 Auth 例子解读</title>
    <url>/2018/10/26/react-router-v4-examples-auth/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">import React from &quot;react&quot;;</span><br><span class="line">import &#123;</span><br><span class="line">  BrowserRouter as Router,</span><br><span class="line">  Route,</span><br><span class="line">  Link,</span><br><span class="line">  Redirect,</span><br><span class="line">  withRouter</span><br><span class="line">&#125; from &quot;react-router-dom&quot;;</span><br><span class="line"></span><br><span class="line">////////////////////////////////////////////////////////////</span><br><span class="line">// 1. Click the public page</span><br><span class="line">// 2. Click the protected page</span><br><span class="line">// 3. Log in</span><br><span class="line">// 4. Click the back button, note the URL each time</span><br><span class="line"></span><br><span class="line">function AuthExample() &#123;</span><br><span class="line">  return (</span><br><span class="line">    <span class="tag">&lt;<span class="name">Router</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">AuthButton</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/public&quot;</span>&gt;</span>Public Page<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/protected&quot;</span>&gt;</span>Protected Page<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/public&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Public&#125;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/login&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Login&#125;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">PrivateRoute</span> <span class="attr">path</span>=<span class="string">&quot;/protected&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Protected&#125;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 保存着是否登录状态</span><br><span class="line">const fakeAuth = &#123;</span><br><span class="line">  isAuthenticated: false,</span><br><span class="line">  authenticate(cb) &#123;</span><br><span class="line">    this.isAuthenticated = true;</span><br><span class="line">    setTimeout(cb, 100); // fake async</span><br><span class="line">  &#125;,</span><br><span class="line">  signout(cb) &#123;</span><br><span class="line">    this.isAuthenticated = false;</span><br><span class="line">    setTimeout(cb, 100);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 首先根据某个状态判断用户有没有登录，如果登录了就显示登出按钮，否则就显示用户没有登录</span><br><span class="line">const AuthButton = withRouter((&#123; history &#125;) =&gt;</span><br><span class="line">  fakeAuth.isAuthenticated ? (</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      Welcome!&#123;&quot; &quot;&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123; fakeAuth.signout(() =&gt; history.push(&quot;/&quot;)); &#125;&#125;&gt;登出<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  ) : (</span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>你没有登录.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">// 拿到传给 PrivateRoute 的 Protected 组件 和 Protected 属性，然后把传进来的属性和组件传给Route组件，Route组件返回前进行判断，如果已经登录而返回原组件，则否则生定向到login页面</span><br><span class="line">function PrivateRoute(&#123; component: Protected, ...rest &#125;) &#123;</span><br><span class="line">  return (</span><br><span class="line">    <span class="tag">&lt;<span class="name">Route</span> &#123;<span class="attr">...rest</span>&#125; <span class="attr">render</span>=<span class="string">&#123;props</span> =&gt;</span></span><br><span class="line">      (fakeAuth.isAuthenticated ? (</span><br><span class="line">        <span class="tag">&lt;<span class="name">Protected</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span><br><span class="line">      ) : (</span><br><span class="line">          <span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&#123;&#123;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">pathname:</span> &quot;/<span class="attr">login</span>&quot;,</span></span><br><span class="line"><span class="tag">            <span class="attr">state:</span> &#123; <span class="attr">from:</span> <span class="attr">props.location</span> &#125;</span></span><br><span class="line"><span class="tag">          &#125;&#125; /&gt;</span></span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    &#125; /&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Public 组件</span><br><span class="line">function Public() &#123;</span><br><span class="line">  return <span class="tag">&lt;<span class="name">h3</span>&gt;</span>公开的<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Protected 组件</span><br><span class="line">function Protected() &#123;</span><br><span class="line">  return <span class="tag">&lt;<span class="name">h3</span>&gt;</span>受保护的<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 登录组件</span><br><span class="line">class Login extends React.Component &#123;</span><br><span class="line">  state = &#123; redirectToReferrer: false &#125;;</span><br><span class="line"></span><br><span class="line">  // 更改 fakeAuth 里的状态，即登录</span><br><span class="line">  login = () =&gt; &#123;</span><br><span class="line">    fakeAuth.authenticate(() =&gt; &#123;</span><br><span class="line">      this.setState(&#123; redirectToReferrer: true &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    debugger</span><br><span class="line">    let &#123; from &#125; = this.props.location.state || &#123; from: &#123; pathname: &quot;/&quot; &#125; &#125;;</span><br><span class="line">    let &#123; redirectToReferrer &#125; = this.state;</span><br><span class="line">    // 如果用户已经登录则重定向到之前的页面</span><br><span class="line">    if (redirectToReferrer) return <span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&#123;from&#125;</span> /&gt;</span>;</span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>您必须登录才能查看该页面 &#123;from.pathname&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.login&#125;</span>&gt;</span>登入<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default AuthExample;</span><br></pre></td></tr></table></figure>
<span id="more"></span>

]]></content>
      <categories>
        <category>Web Developer</category>
      </categories>
      <tags>
        <tag>React Router</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次矿卡翻车</title>
    <url>/2024/01/05/record-a-mine-truck-rollover/</url>
    <content><![CDATA[<h2 id="稳定性测试"><a href="#稳定性测试" class="headerlink" title="稳定性测试"></a>稳定性测试</h2><p>矿卡型号：RX5700XL</p>
<span id="more"></span>

<p><img  
                       lazyload
                       alt="image"
                       data-src="https://img.xmit.eu.org/gh/zhen-ke/img@main/05.15zc9dszsyf4.jpg"
                        alt="1"
                 ></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://img.xmit.eu.org/gh/zhen-ke/img@main/04.5briw6qg7lc0.jpg"
                        alt="2"
                 ></p>
<h2 id="拆机"><a href="#拆机" class="headerlink" title="拆机"></a>拆机</h2><p>使用一段时间后，发现温度有点高就拆开清灰换硅脂，拆开发现卡整体情况比较差</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://img.xmit.eu.org/gh/zhen-ke/img@main/01.7iafcly1hhs0.jpg"
                        alt="3"
                 ></p>
<h2 id="翻车"><a href="#翻车" class="headerlink" title="翻车"></a>翻车</h2><p><img  
                       lazyload
                       alt="image"
                       data-src="https://img.xmit.eu.org/gh/zhen-ke/img@main/IMG_5781.212aaauzvg2o.PNG"
                        alt="4"
                 ></p>
<p>店家没有追究我私拆卡导致保修失效，成功给换了一张卡，到目前为止使用良好，换卡后，外观看起来比较新，整体满意。</p>
<h2 id="意外发现"><a href="#意外发现" class="headerlink" title="意外发现"></a>意外发现</h2><p>换卡正常使用没啥问题，但玩游戏时问题比较多，体现在刚进守望先锋的前几分钟里，掉帧比较严重，尝试重置游戏设置、降低游戏画质、重装系统、重装驱动等都无法解决，后续搜索显卡 Bios 时意外发现这卡居然有个开关能切换显卡的 Bios。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://img.xmit.eu.org/gh/zhen-ke/img@main/image.3biawnxc3co0.jpg"
                        alt="5"
                 ></p>
<p>切换性能模式后掉帧的问题基本就解决了，从 GPUZ 里看频率和功耗变高了点。</p>
<p>最主要是 GPUZ 已经识别成 RX5700XT 了</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://img.xmit.eu.org/gh/zhen-ke/img@main/image.4xtr37omw340.jpg"
                        alt="6"
                 ></p>
]]></content>
      <categories>
        <category>显卡</category>
      </categories>
      <tags>
        <tag>矿卡</tag>
      </tags>
  </entry>
  <entry>
    <title>setTimeout传参数</title>
    <url>/2017/12/28/settimeout-add-params/</url>
    <content><![CDATA[<p>除了前两个参数，setTimeout还允许添加更多的参数。它们将被传入推迟执行的函数（回调函数）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a+b);</span><br><span class="line">&#125;,<span class="number">1000</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<p>使用bind方法，把多余的参数绑定在回调函数上面，生成一个新的函数输入setTimeout</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params">b</span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params">arg</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg)</span><br><span class="line">  &#125;.<span class="title function_">bind</span>(<span class="literal">null</span>,b),<span class="number">2000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">a</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>使用闭包</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params">arg</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">c</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="title function_">a</span>(<span class="number">2</span>),<span class="number">1000</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web Developer</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Some changes made in life in 2023</title>
    <url>/2023/12/03/some-changes-made-in-life-in-2023/</url>
    <content><![CDATA[<p>不熬夜，晚上 10 点左右睡觉，一般早上 6 点左右就醒</p>
<span id="more"></span>

<p><img  
                       lazyload
                       alt="image"
                       data-src="https://img.xmit.eu.org/gh/zhen-ke/img@main/IMG_5655.4nz32at7ds00.jpg"
                        alt="01"
                 ></p>
<p>坚持静坐，从年初只能坐 10 几分钟到现在能坐 30~40 分钟左右<br><img  
                       lazyload
                       alt="image"
                       data-src="https://img.xmit.eu.org/gh/zhen-ke/img@main/IMG_5656.1vnpy6v85g4g.jpg"
                        alt="02"
                 ></p>
<p>戒 yín，从年初到现在差不多 300 多天，唯一的问题是晚上会梦遗，导致第二天要换床单</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>改变</tag>
      </tags>
  </entry>
  <entry>
    <title>Sublime Text - Snippets</title>
    <url>/2015/08/27/sublime-text-snippets/</url>
    <content><![CDATA[<p>在写代码时，会经常用到一些重覆的代码，这个时候就可以用 Sublime Text - Snippets 代码片段功能。</p>
<h2 id="Snippets-代码片段功能使用方法"><a href="#Snippets-代码片段功能使用方法" class="headerlink" title="Snippets 代码片段功能使用方法"></a>Snippets 代码片段功能使用方法</h2><h3 id="创建-Snippets"><a href="#创建-Snippets" class="headerlink" title="创建 Snippets"></a>创建 Snippets</h3><p>在工具栏选择 <code>Tools &gt; New Snippet</code> </p>
<h3 id="Snippets-参数设置"><a href="#Snippets-参数设置" class="headerlink" title="Snippets 参数设置"></a>Snippets 参数设置</h3><ul>
<li><p><strong>tabTrigger</strong> : 快捷键，利用Tab自动补全代码的功能。（可选）</p>
</li>
<li><p><strong>scope</strong>: 使用范围，不填写代表对所有文件有效。附：source.css和test.html分别对应不同文件。（可选）</p>
</li>
<li><p><strong>description</strong> : 在snippet菜单中的显示说明（支持中文）。如果不定义，菜单则显示当前文件的文件名。（可选）</p>
</li>
<li><p><strong>${1:name}</strong> : 表示代码插入后，光标所停留的位置，可同时插入多个。其中:name为自定义参数（可选）。</p>
</li>
<li><p><strong>${2}</strong> : 表示代码插入后，按Tab键，光标会根据顺序跳转到相应位置（以此类推）。</p>
<span id="more"></span></li>
</ul>
<h3 id="Snippets-Demo"><a href="#Snippets-Demo" class="headerlink" title="Snippets Demo"></a>Snippets Demo</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">snippet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">content</span>&gt;</span></span><br><span class="line">    &lt;![CDATA[</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;zh-cn&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;description&quot; content=&quot;$&#123;1:name&#125;&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;keywords&quot; content=&quot;$&#123;2&#125;&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;css/style.css&quot;&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script src=&quot;//cdn.staticfile.org/jquery/1.9.0/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">    ]]&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">content</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tabTrigger</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">tabTrigger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>html5<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>text.html<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">snippet</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>创建完毕以后，保存在<code>\Packages\User</code>目录下（例 <code>X:\Sublime Text 2\Data\Packages\User</code>），文件命名为demo，后缀名<code>.sublime-snippet</code>。</p>
<p>此时我们打开一个html文件，输入demo，再按<code>Tab</code>键，刚才我们所编写的代码段，就插入了进来。并且此时的光标停留在我们所标记的<code>$&#123;1&#125;</code>位置处，如果我们再按下<code>Tab</code>，那么光标就跳转到<code>$&#123;2&#125;</code>的位置。由于我们在<code>scope</code>中定义了仅在html文件中使用，所以此时如果我们打开的是css或其他格式的文件，那将无法插入代码段。</p>
<p>补充：除了利用快捷键<code>Tab</code>出代码之外，我们还能通过菜单来加载，打开<code>Tools &gt; Snippet</code>，选择<code>Snippet: html5</code>。如果你没有定义description，那此时便会看到以我们文件名为命名的</p>
]]></content>
      <categories>
        <category>Web Developer</category>
      </categories>
      <tags>
        <tag>SublimeText</tag>
      </tags>
  </entry>
  <entry>
    <title>synology 上部署 Hexo</title>
    <url>/2018/03/06/synology-hexo/</url>
    <content><![CDATA[<p>提示：本教程会直接跳过配置 <code>github pags</code>与 <code>Hexo</code> </p>
<h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><ul>
<li>在套件中心安装 “Git Server” 和 ”Node.js v4”</li>
<li>在 home 目录（其它目录也可以）建立一个文件夹，用来保存你的 blog</li>
<li>在终端（或者其它SSH的工具）下连接你的 Synology</li>
</ul>
<h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><p>如果你本地已经初始过已经安装过 Hexo 并具安装过必须的依赖，则只需要把本地的文件丢到<code>/home/blog</code>目录即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog //找到你放blog的目录即可</span><br><span class="line">npm install -g hexo-cli  //安装Hexo</span><br></pre></td></tr></table></figure>

<p>如果是第一次安装，则需要进行以下操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install -g hexo-cli  //安装Hexo</span><br><span class="line">hexo -v  //查看Hexo的安装是否正常</span><br><span class="line">hexo init  //初始化Hexo</span><br><span class="line"><span class="built_in">cd</span> hexo</span><br><span class="line">npm install  //安装依赖包</span><br><span class="line">npm install hexo-deployer-git --save  //安装插件</span><br></pre></td></tr></table></figure>

<h3 id="启动-Hexo"><a href="#启动-Hexo" class="headerlink" title="启动 Hexo"></a>启动 Hexo</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Hexo s // 启动本地服务器</span><br></pre></td></tr></table></figure>

<h3 id="部署到-Github"><a href="#部署到-Github" class="headerlink" title="部署到 Github"></a>部署到 Github</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean // 清除本地缓存</span><br><span class="line"></span><br><span class="line">hexo generator // 初始化文件</span><br><span class="line"></span><br><span class="line">hexo deploy // 提交文件到服务器</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>NAS</category>
      </categories>
      <tags>
        <tag>NAS</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 通信</title>
    <url>/2017/11/20/vue-communication/</url>
    <content><![CDATA[<h2 id="父子通信"><a href="#父子通信" class="headerlink" title="父子通信"></a>父子通信</h2><h3 id="父组件使用-prop-传递数据给子组件"><a href="#父组件使用-prop-传递数据给子组件" class="headerlink" title="父组件使用 prop 传递数据给子组件"></a>父组件使用 prop 传递数据给子组件</h3><p>在父组件 father.vue 中引用子组件 child.vue，把 name 的值传给 child 组件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    // message 定义在子组件的 props 中</span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">:message</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> child <span class="keyword">from</span> <span class="string">&#x27;./child.vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    child</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&#x27;linxin&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>在子组件 child.vue 中的 props 选项中声明它期待获得的数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Hello &#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 在 props 中声明获取父组件的数据通过 message 传过来</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: [<span class="string">&#x27;message&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="子组件通过自定义事件跟父组件通信"><a href="#子组件通过自定义事件跟父组件通信" class="headerlink" title="子组件通过自定义事件跟父组件通信"></a>子组件通过自定义事件跟父组件通信</h3><p>父组件 father.vue 在子组件上监听子组件触发的事件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; total &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> @<span class="attr">increment</span>=<span class="string">&quot;incrementTotal&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> child <span class="keyword">from</span> <span class="string">&#x27;./child.vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    child</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">total</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">incrementTotal</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">total</span> += <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>子组件 child.vue 派发一个事件名称与父组件通信</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;incrementCounter&quot;</span>&gt;</span>&#123;&#123; counter &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">counter</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">incrementCounter</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">counter</span> += <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;increment&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="兄弟通信"><a href="#兄弟通信" class="headerlink" title="兄弟通信"></a>兄弟通信</h2><p>全局事件中心 bus.js 文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">export default new Vue();</span><br></pre></td></tr></table></figure>

<p>父组件 father.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">childa</span>&gt;</span><span class="tag">&lt;/<span class="name">childa</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">childb</span>&gt;</span><span class="tag">&lt;/<span class="name">childb</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> childa <span class="keyword">from</span> <span class="string">&#x27;./components/childa&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> childb <span class="keyword">from</span> <span class="string">&#x27;./components/childb&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    childa,</span></span><br><span class="line"><span class="language-javascript">    childb,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>子组件 childA.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> bus <span class="keyword">from</span> <span class="string">&#x27;../bus&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">msg</span>: <span class="string">&quot;你好&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">created</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    bus.$on(<span class="string">&#x27;setMsg&#x27;</span>, <span class="function"><span class="params">it</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">msg</span> = it</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>子组件 childB.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;sendEvent&#x27;</span>&gt;</span>Say Hi<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> bus <span class="keyword">from</span> <span class="string">&#x27;../bus&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">sendEvent</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      bus.$emit(<span class="string">&#x27;setMsg&#x27;</span>, <span class="string">&#x27;hi vue&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h2><h3 id="在组件中获得-Vuex-状态"><a href="#在组件中获得-Vuex-状态" class="headerlink" title="在组件中获得 Vuex 状态"></a>在组件中获得 Vuex 状态</h3><h4 id="mapState函数"><a href="#mapState函数" class="headerlink" title="mapState函数"></a>mapState函数</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Vue</span></span><br><span class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">computed</span>: <span class="title function_">mapState</span>([<span class="string">&#x27;count&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="从-store-中的-state-中派生出一些状态"><a href="#从-store-中的-state-中派生出一些状态" class="headerlink" title="从 store 中的 state 中派生出一些状态"></a>从 store 中的 state 中派生出一些状态</h3><h4 id="Getters对象"><a href="#Getters对象" class="headerlink" title="Getters对象"></a>Getters对象</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Vuex</span></span><br><span class="line"><span class="attr">getters</span>: &#123;</span><br><span class="line">  <span class="attr">doneTodos</span>: <span class="function"><span class="params">state</span> =&gt;</span> &#123; <span class="comment">// 对state对象进行做处理计算</span></span><br><span class="line">    <span class="keyword">return</span> state.<span class="property">todos</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">todo</span> =&gt;</span> todo.<span class="property">done</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="mapGetters辅助函数"><a href="#mapGetters辅助函数" class="headerlink" title="mapGetters辅助函数"></a>mapGetters辅助函数</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Vue</span></span><br><span class="line"><span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">// 使用对象展开运算符将 getters 混入 computed 对象中</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>([</span><br><span class="line">      <span class="string">&#x27;doneTodosCount&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;anotherGetter&#x27;</span>,</span><br><span class="line">    ])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="更改-store-中的状态的唯一方法是提交-mutation"><a href="#更改-store-中的状态的唯一方法是提交-mutation" class="headerlink" title="更改 store 中的状态的唯一方法是提交 mutation"></a>更改 store 中的状态的唯一方法是提交 mutation</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  Vuex</span></span><br><span class="line"><span class="attr">mutation</span>: &#123;</span><br><span class="line">  increment (state, payload) &#123;</span><br><span class="line">    state.<span class="property">totalPrice</span> += payload.<span class="property">price</span> + payload.<span class="property">count</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="对象风格的提交方式"><a href="#对象风格的提交方式" class="headerlink" title="对象风格的提交方式"></a>对象风格的提交方式</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Vue</span></span><br><span class="line">store.<span class="title function_">commit</span>(&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;increment&#x27;</span>,</span><br><span class="line">  <span class="attr">price</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">count</span>: <span class="number">8</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="使用常量替代-Mutation-事件类型"><a href="#使用常量替代-Mutation-事件类型" class="headerlink" title="使用常量替代 Mutation 事件类型"></a>使用常量替代 Mutation 事件类型</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// mutation-types.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">SOME_MUTATION</span> = <span class="string">&#x27;SOME_MUTATION&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// store.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> types <span class="keyword">from</span>  <span class="string">&#x27;./mutation-types&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="comment">// 我们可以使用 ES2015 风格的计算属性命名功能来使用一个常量作为函数名</span></span><br><span class="line">    [<span class="variable constant_">SOME_MUTATION</span>] (state,payload) &#123;</span><br><span class="line">      <span class="comment">// mutate state</span></span><br><span class="line">      state.<span class="property">payload</span> = payload</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="mapMutations函数-在组件中提交-Mutations"><a href="#mapMutations函数-在组件中提交-Mutations" class="headerlink" title="mapMutations函数 - 在组件中提交 Mutations"></a>mapMutations函数 - 在组件中提交 Mutations</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Vue</span></span><br><span class="line"><span class="keyword">import</span> &#123; mapMutations &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    ...<span class="title function_">mapMutations</span>([</span><br><span class="line">      <span class="string">&#x27;increment&#x27;</span>, <span class="comment">// 将 `this.increment()` 映射为 `this.$store.commit(&#x27;increment&#x27;)`</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// `mapMutations` 也支持载荷：</span></span><br><span class="line">      <span class="string">&#x27;incrementBy&#x27;</span> <span class="comment">// 将 `this.incrementBy(amount)` 映射为 `this.$store.commit(&#x27;incrementBy&#x27;, amount)`</span></span><br><span class="line">    ]),</span><br><span class="line">    ...<span class="title function_">mapMutations</span>(&#123;</span><br><span class="line">      <span class="attr">add</span>: <span class="string">&#x27;increment&#x27;</span> <span class="comment">// 将 `this.add()` 映射为 `this.$store.commit(&#x27;increment&#x27;)`</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><h4 id="Action-是异步提交-mutation"><a href="#Action-是异步提交-mutation" class="headerlink" title="Action 是异步提交 mutation"></a>Action 是异步提交 mutation</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      state.<span class="property">count</span>++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    increment (context) &#123;</span><br><span class="line">      context.<span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="分发-Action"><a href="#分发-Action" class="headerlink" title="分发 Action"></a>分发 Action</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以载荷形式分发</span></span><br><span class="line">store.<span class="title function_">dispatch</span>(<span class="string">&#x27;incrementAsync&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">amount</span>: <span class="number">10</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以对象形式分发</span></span><br><span class="line">store.<span class="title function_">dispatch</span>(&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;incrementAsync&#x27;</span>,</span><br><span class="line">  <span class="attr">amount</span>: <span class="number">10</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="mapActions-在组件中分发-Action"><a href="#mapActions-在组件中分发-Action" class="headerlink" title="mapActions - 在组件中分发 Action"></a>mapActions - 在组件中分发 Action</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapActions &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    ...<span class="title function_">mapActions</span>([</span><br><span class="line">      <span class="string">&#x27;increment&#x27;</span>, <span class="comment">// 将 `this.increment()` 映射为 `this.$store.dispatch(&#x27;increment&#x27;)`</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// `mapActions` 也支持载荷：</span></span><br><span class="line">      <span class="string">&#x27;incrementBy&#x27;</span> <span class="comment">// 将 `this.incrementBy(amount)` 映射为 `this.$store.dispatch(&#x27;incrementBy&#x27;, amount)`</span></span><br><span class="line">    ]),</span><br><span class="line">    ...<span class="title function_">mapActions</span>(&#123;</span><br><span class="line">      <span class="attr">add</span>: <span class="string">&#x27;increment&#x27;</span> <span class="comment">// 将 `this.add()` 映射为 `this.$store.dispatch(&#x27;increment&#x27;)`</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Web Developer</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 动态组件</title>
    <url>/2018/04/18/vue-component-learn/</url>
    <content><![CDATA[<p>最近读到一篇关于Vue实现内部组件轮播切换效果文章，发现非常有意思，这里就记录一下实现的方法</p>
<h2 id="原文章地址"><a href="#原文章地址" class="headerlink" title="原文章地址"></a>原文章地址</h2><blockquote>
<p><a class="link"   href="https://fed.renren.com/2018/04/06/vue-component-slider/" >Vue实现内部组件轮播切换效果<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><blockquote>
<p>通过<code>&lt;component&gt;</code>元素渲染一个“元组件”为动态组件。依 is 的值，来决定哪个组件被渲染。 </p>
</blockquote>
<span id="more"></span>

<h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>重点在component元素这段代码，通过它的is值，动态地加载组件实现切换。在组件初始化的时候，给<code>questions</code>进行赋值操作，然后在点击下一步的时候改变当前的<code>currentIndex</code>的值，动态读取<code>questions</code>的<code>type</code>属性即可实现动态组件加载。</p>
<p><code>app.vue</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;task-container&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 重点在下面这段代码，通过component的is值，动态地加载组件实现切换 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;&#x27;task-&#x27; + questions[currentIndex].type&quot;</span> <span class="attr">:question</span>=<span class="string">&quot;questions[currentIndex]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;next-question&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;nextQuestion&quot;</span>&gt;</span>下一题<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Task1</span> <span class="keyword">from</span> <span class="string">&quot;./components/task-1&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Task2</span> <span class="keyword">from</span> <span class="string">&quot;./components/task-2&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Task3</span> <span class="keyword">from</span> <span class="string">&quot;./components/task-3&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">currentIndex</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">questions</span>: []</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">nextQuestion</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">currentIndex</span> = (<span class="variable language_">this</span>.<span class="property">currentIndex</span> + <span class="number">1</span>) % <span class="variable language_">this</span>.<span class="property">questions</span>.<span class="property">length</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">questions</span> = [</span></span><br><span class="line"><span class="language-javascript">      &#123; <span class="attr">index</span>: <span class="number">1</span>, <span class="attr">type</span>: <span class="number">1</span>, <span class="attr">content</span>: <span class="string">&quot;这里是 Task1 组件&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123; <span class="attr">index</span>: <span class="number">2</span>, <span class="attr">type</span>: <span class="number">2</span>, <span class="attr">content</span>: <span class="string">&quot;这里是 Task2 组件&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123; <span class="attr">index</span>: <span class="number">3</span>, <span class="attr">type</span>: <span class="number">3</span>, <span class="attr">content</span>: <span class="string">&quot;这里是 Task3 组件&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">    ];</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Task1</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Task2</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Task3</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>task-1.vue</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;question.index&#125;&#125;. 选择题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;question.content&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: [<span class="string">&quot;question&quot;</span>]</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>task-2.vue、task-3.vue</code> 同上</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack 学习笔记</title>
    <url>/2019/11/23/webpack-study-notes/</url>
    <content><![CDATA[<h2 id="webpack-是什么？"><a href="#webpack-是什么？" class="headerlink" title="webpack 是什么？"></a>webpack 是什么？</h2><p>它是一个模块打包工具</p>
<h2 id="Loader-是什么？"><a href="#Loader-是什么？" class="headerlink" title="Loader 是什么？"></a>Loader 是什么？</h2><p>webpack 不能识别 JavaScript 之外的文件，需要 loader 对它时行识别</p>
<h3 id="file-loader"><a href="#file-loader" class="headerlink" title="file-loader"></a>file-loader</h3><p>file-loader 就是在 JavaScript 代码里 import&#x2F;require 一个文件时，会将该文件生成到输出目录，并且在 JavaScript 代码里返回该文件的地址。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|jpeg|gif|svg)/</span>,</span><br><span class="line">        <span class="attr">use</span>: &#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&quot;file-loader&quot;</span>,</span><br><span class="line">          <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="comment">// placeholders 占位符</span></span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;[name].[ext]&quot;</span>, <span class="comment">// 自定义打包文件名</span></span><br><span class="line">            <span class="attr">outputPath</span>: <span class="string">&quot;images/&quot;</span>, <span class="comment">// 自定义输出目录</span></span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="url-loader"><a href="#url-loader" class="headerlink" title="url-loader"></a>url-loader</h3><p>url-loader 功能类似于 file-loader，但是在文件大小（单位 byte）低于指定的限制时，可以返回一个 DataURL。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&quot;url-loader&quot;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">limit</span>: <span class="number">8192</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="处理-Sass"><a href="#处理-Sass" class="headerlink" title="处理 Sass"></a>处理 Sass</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          <span class="comment">// 处理过程是从下到上的，从右到左的</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&quot;style-loader&quot;</span>, <span class="comment">// style-loader 会在 head 里插入一个 `&lt;style&gt;` 标签，并且将 CSS 写入这个标签内。</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&quot;css-loader&quot;</span>, <span class="comment">// 将 CSS 转化成 CommonJS 模块</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&quot;sass-loader&quot;</span>, <span class="comment">// 将 Sass 编译成 CSS</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&quot;postcss-loader&quot;</span>, <span class="comment">// 添加私有属性</span></span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">plugins</span>: [<span class="built_in">require</span>(<span class="string">&quot;autoprefixer&quot;</span>)(&#123;&#125;)],</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="处理-CSS"><a href="#处理-CSS" class="headerlink" title="处理 CSS"></a>处理 CSS</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(css)$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&quot;style-loader&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">&quot;css-loader&quot;</span> &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Plugins-是什么？"><a href="#Plugins-是什么？" class="headerlink" title="Plugins 是什么？"></a>Plugins 是什么？</h2><p>在 webpack 运行到某个时刻的时做一些事情</p>
<h3 id="HtmlWebpackPlugin"><a href="#HtmlWebpackPlugin" class="headerlink" title="HtmlWebpackPlugin"></a>HtmlWebpackPlugin</h3><p>会在打包结束后，自动生成一个 html 文件，并把打包生成的 JS 文件自动引入到这个 html 文件里</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./dist&quot;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;index_bundle.js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./src/index.html&quot;</span>, <span class="comment">// 通过模板来生成html</span></span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="CleanWebpackPlugin"><a href="#CleanWebpackPlugin" class="headerlink" title="CleanWebpackPlugin"></a>CleanWebpackPlugin</h3><p>用于在下一次打包时清除之前打包的文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">CleanWebpackPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;clean-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./dist&quot;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;index_bundle.js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>()],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="SourceMap"><a href="#SourceMap" class="headerlink" title="SourceMap"></a>SourceMap</h2><p>可以将编译后的代码映射回原始源代码，用来追踪到 error(错误) 和 warning(警告) 在源代码中的原始位置。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// inline-source-map: 不生成.map文件，会以 base64 的字符串加入到打包文件中,报错信息会精确到行和列</span></span><br><span class="line"><span class="comment">// cheap-inline-source-map: 不生成.map文件，会以 base64 的字符串加入到打包文件中,报错信息只会精确到行（打包性能会提升）</span></span><br><span class="line"><span class="comment">// cheap-module-eval-source-map： 默认它只会处理业务中错误，不会处理module里错误，如果加入module，就会处理第三方模块的错误</span></span><br><span class="line"><span class="comment">// eval：这种打包方式最快，性能最好,但错误提示比较弱</span></span><br></pre></td></tr></table></figure>

<p>最佳实践</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">devtool</span>:<span class="string">&quot;cheap-module-eval-source-map&quot;</span>,<span class="comment">// 开发环境配置</span></span><br><span class="line"><span class="attr">devtool</span>:<span class="string">&quot;cheap-module-source-map&quot;</span>,   <span class="comment">// 线上生成配置</span></span><br></pre></td></tr></table></figure>

<h2 id="devServer"><a href="#devServer" class="headerlink" title="devServer"></a>devServer</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">contentBase</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;dist&quot;</span>), <span class="comment">// 默认情况下，将使用当前工作目录作为提供内容的目录。</span></span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>, <span class="comment">// 告诉 dev-server 在 server 启动后打开浏览器。默认禁用。</span></span><br><span class="line">    <span class="attr">port</span>: <span class="number">9000</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Hot-Module-Replacement"><a href="#Hot-Module-Replacement" class="headerlink" title="Hot Module Replacement"></a>Hot Module Replacement</h2><p>它允许在项目在修改的时候，无需完全刷新页面。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&quot;webpack&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">hot</span>: <span class="literal">true</span>, <span class="comment">// 启用 HMR</span></span><br><span class="line">    <span class="attr">hotOnly</span>: <span class="literal">true</span>, <span class="comment">// 在 HMR 失效时，不会刷新页面</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="keyword">new</span> webpack.<span class="title class_">HotModuleReplacementPlugin</span>()],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="使用-Bable-编译-ES6"><a href="#使用-Bable-编译-ES6" class="headerlink" title="使用 Bable 编译 ES6"></a>使用 Bable 编译 ES6</h2><p>bable 转 ES6 相关：</p>
<ol>
<li><code>babel-loader</code>: 负责 es6 语法转化</li>
<li><code>babel-preset-env</code>: 包含 es6、7 等版本的语法转化规则</li>
<li><code>babel-polyfill</code>: es6 内置方法和函数转化垫片</li>
<li><code>babel-plugin-transform-runtime</code>: 避免 polyfill 污染全局变量</li>
</ol>
<p>需要注意的是, <code>babel-loader</code>和<code>babel-polyfill</code>。前者负责语法转化，比如：箭头函数；后者负责内置方法和函数，比如：<code>new Set()</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save-dev babel-loader @babel/core</span><br><span class="line">npm install @babel/preset-env --save-dev</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">      <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">      <span class="attr">options</span>: &#123;</span><br><span class="line">        <span class="attr">presets</span>: [<span class="string">&quot;@babel/preset-env&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果需要对<code>Promise、map</code> 之类的方法做兼容处理则需要安装<code>babel-polyfill</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save @babel/polyfill</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">      <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">      <span class="attr">options</span>: &#123;</span><br><span class="line">        <span class="attr">presets</span>: [</span><br><span class="line">          [<span class="string">&quot;@babel/preset-env&quot;</span>],</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">targets</span>: &#123;</span><br><span class="line">              <span class="comment">// 根据目标版本号选择是否要进行转换</span></span><br><span class="line">              <span class="attr">edge</span>: <span class="string">&quot;17&quot;</span>,</span><br><span class="line">              <span class="attr">firefox</span>: <span class="string">&quot;60&quot;</span>,</span><br><span class="line">              <span class="attr">chrome</span>: <span class="string">&quot;67&quot;</span>,</span><br><span class="line">              <span class="attr">safari</span>: <span class="string">&quot;11.1&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">useBuiltIns</span>: <span class="string">&quot;usage&quot;</span>, <span class="comment">// 按需引入polyfill,这样能大大减少打包编译后的体积</span></span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>使用 <code>&quot;useBuiltIns&quot;: &quot;usage&quot;</code>后，不需要在项目里在引入<code>import &#39;@babel/polyfill&#39;</code></p>
<p>默认<code>polyfill</code>会污染全局变量，如果开发一个第三方模块或者库的时候则需要用<code>@babel/runtime</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save @babel/runtime</span><br><span class="line">npm install --save @babel/runtime-corejs2</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">      <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">      <span class="attr">options</span>: &#123;</span><br><span class="line">        <span class="attr">plugins</span>: [</span><br><span class="line">          [</span><br><span class="line">            <span class="string">&quot;@babel/plugin-transform-runtime&quot;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">absoluteRuntime</span>: <span class="literal">false</span>,</span><br><span class="line">              <span class="attr">corejs</span>: <span class="number">2</span>,</span><br><span class="line">              <span class="attr">helpers</span>: <span class="literal">true</span>,</span><br><span class="line">              <span class="attr">regenerator</span>: <span class="literal">true</span>,</span><br><span class="line">              <span class="attr">useESModules</span>: <span class="literal">false</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果配置文件较多时，可以项目内新建一个<code>.babelrc</code>，然后把<code>options</code>里的内容放进去</p>
<p><code>.babelrc</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="string">&quot;plugins&quot;</span> : [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&quot;@babel/plugin-transform-runtime&quot;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;absoluteRuntime&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;corejs&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">&quot;helpers&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;regenerator&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;useESModules&quot;</span>: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>wepback.config.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">      <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Tree-Shaking"><a href="#Tree-Shaking" class="headerlink" title="Tree Shaking"></a>Tree Shaking</h2><p>清除到代码中无用的<code>js</code>代码，只支持<code>ES Module</code>,也就是只支持<code>import</code>（静态引入）方式引入，不支持<code>CommonJS</code>（动态引入）的方式引入</p>
<p>在<code>mode</code>是<code>production</code>时就会进行<code>Tree Shaking</code>，为了方便你的调试可以在配置文件中加入如下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">optimization</span>: &#123;</span><br><span class="line">  <span class="attr">usedExports</span>: <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>package.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假如我们在某个模块里需要引入一个库或者css文件，但它没有导出任何东西时，Tree Shaking 会忽略掉它，这时需要进行手动设置，例如：</span></span><br><span class="line"></span><br><span class="line">sideEffects<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span> <span class="comment">// false 对所有模块进行 Tree Shaking</span></span><br><span class="line">sideEffects<span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;@babel/polyfill&quot;</span><span class="punctuation">]</span> <span class="comment">// 不要对 @babel/polyfill 进行 Tree Shaking</span></span><br><span class="line">sideEffects<span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;*.css&quot;</span><span class="punctuation">]</span> <span class="comment">// 不要对 css 进行 Tree Shaking</span></span><br></pre></td></tr></table></figure>

<h2 id="Code-Splitting"><a href="#Code-Splitting" class="headerlink" title="Code Splitting"></a>Code Splitting</h2><p>异步的代码 （<code>import</code>）<code>webpack</code>会自动的进行代码分割，同步代码则需要进行如下配置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">optimization</span>: &#123;</span><br><span class="line">  <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">    <span class="attr">chunks</span>: <span class="string">&quot;all&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="SplitChunksPlugin-配置详解"><a href="#SplitChunksPlugin-配置详解" class="headerlink" title="SplitChunksPlugin 配置详解"></a>SplitChunksPlugin 配置详解</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">      <span class="attr">chunks</span>: <span class="string">&quot;async&quot;</span>, <span class="comment">// all：所有代码生效、async：只对异步代码生效、initial：只对同步代码生效</span></span><br><span class="line">      <span class="attr">minSize</span>: <span class="number">30000</span>, <span class="comment">// 30kb 大余某个值才会做代码分割</span></span><br><span class="line">      <span class="attr">minRemainingSize</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">maxSize</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">minChunks</span>: <span class="number">1</span>, <span class="comment">// 当对一个模块用了多少次的时候才进行代码分割</span></span><br><span class="line">      <span class="attr">maxAsyncRequests</span>: <span class="number">6</span>,</span><br><span class="line">      <span class="attr">maxInitialRequests</span>: <span class="number">4</span>, <span class="comment">// 入口文件请求数量超过4个时就不会进行代码分割</span></span><br><span class="line">      <span class="attr">automaticNameDelimiter</span>: <span class="string">&quot;~&quot;</span>, <span class="comment">// 打包后文件名的连接符</span></span><br><span class="line">      <span class="attr">automaticNameMaxLength</span>: <span class="number">30</span>,</span><br><span class="line">      <span class="attr">cacheGroups</span>: &#123;</span><br><span class="line">        <span class="comment">// 缓存组，根据cacheGroups来判断将打包文件放到哪个文件里去</span></span><br><span class="line">        <span class="attr">vendors</span>: &#123;</span><br><span class="line">          <span class="comment">// vendors 组</span></span><br><span class="line">          <span class="attr">test</span>: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">          <span class="attr">priority</span>: -<span class="number">10</span>, <span class="comment">// 权重，数值越大权重则越大</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">default</span>: &#123;</span><br><span class="line">          <span class="comment">// default 组</span></span><br><span class="line">          <span class="attr">minChunks</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">priority</span>: -<span class="number">20</span>,</span><br><span class="line">          <span class="attr">reuseExistingChunk</span>: <span class="literal">true</span>, <span class="comment">// 如果某个模块已经被打包过了，在打包的时就忽略，直接引用之前的</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如果对代码进行代码分割，它会去看<code>cacheGroups.vendors</code>这个参数，如果是<code>false</code>则不会进行代码分割，反之，如果引入的库是<code>cacheGroups.vendors.test</code>里的，则会代码分割，如果不是<code>cacheGroups.vendors.test</code>里的，会去看<code>cacheGroups.default</code>这个参数，如果是<code>false</code>则不会进行代码分割，反之则会</p>
<h3 id="为什么-splitChunks-chunks-的默认值是async"><a href="#为什么-splitChunks-chunks-的默认值是async" class="headerlink" title="为什么 splitChunks.chunks 的默认值是async"></a>为什么 <code>splitChunks.chunks</code> 的默认值是<code>async</code></h3><p>因为异步的代码才能提高打包的性能，而同步代码则只能增加缓存</p>
<h3 id="CSS-Code-Splitting"><a href="#CSS-Code-Splitting" class="headerlink" title="CSS Code Splitting"></a>CSS Code Splitting</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save-dev mini-css-extract-plugin</span><br></pre></td></tr></table></figure>

<p><strong>webpack.config.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;mini-css-extract-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&quot;[name].css&quot;</span>, <span class="comment">// 如果是被直接引用的就走这里</span></span><br><span class="line">      <span class="attr">chunkFilename</span>: <span class="string">&quot;[id].css&quot;</span>, <span class="comment">// 如果是被间接引用的就走这里</span></span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>, <span class="comment">// 替换 style-loader，目前只适合在线上环境使用，因为不支持HMR</span></span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">publicPath</span>: <span class="string">&quot;../&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="prefetch-preload-module"><a href="#prefetch-preload-module" class="headerlink" title="prefetch&#x2F;preload module"></a>prefetch&#x2F;preload module</h2><p>在声明 import 时，使用下面这些内置指令，可以让 webpack 输出 “resource hint(资源提示)”，来告知浏览器：</p>
<ul>
<li>prefetch(预取)：当核心代业务代码加载完成后，空闲时候后在加载需要的资源</li>
<li>preload(预加载)：和核心代业务代码一起进行并行加载</li>
</ul>
<p>下面这个 prefetch 的简单示例中，有一个 <code>HomePage</code> 组件，其内部渲染一个 <code>LoginButton</code> 组件，然后在点击后按需加载 <code>LoginModal</code> 组件。</p>
<p><strong>LoginButton.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="comment">/* webpackPrefetch: true */</span> <span class="string">&quot;LoginModal&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>这会生成 <code>&lt;link rel=&quot;prefetch&quot; href=&quot;login-modal-chunk.js&quot;&gt;</code> 并追加到页面头部，指示着浏览器在闲置时间预取<code> login-modal-chunk.js</code> 文件。</p>
]]></content>
      <tags>
        <tag>Web Developer</tag>
      </tags>
  </entry>
</search>
